// Generated by  grogu  starting from JINJA templated  MODULE_TEMPLATE_NATIVE.v  file

`default_nettype none

`include "HL_NEURON_REGFILE.vh"

// Native interface based design for large and distributed register files (used in conjunction with
// the SCI configuration ring)
module HL_NEURON_REGFILE (
    // Clock and reset
    input wire CLK,
    input wire RSTN,
    // Register interface
    input wire WREQ,
    input wire [5:0] WADDR,
    input wire [7:0] WDATA,
    output wire WACK,
    input wire RREQ,
    input wire [5:0] RADDR,
    output wire [7:0] RDATA,
    output wire RVALID,
    // Register bundles
    output wire [7:0] HWIF_OUT_WEIGHT_0,
    output wire [7:0] HWIF_OUT_WEIGHT_1,
    output wire [7:0] HWIF_OUT_WEIGHT_2,
    output wire [7:0] HWIF_OUT_WEIGHT_3,
    output wire [7:0] HWIF_OUT_WEIGHT_4,
    output wire [7:0] HWIF_OUT_WEIGHT_5,
    output wire [7:0] HWIF_OUT_WEIGHT_6,
    output wire [7:0] HWIF_OUT_WEIGHT_7,
    output wire [7:0] HWIF_OUT_WEIGHT_8,
    output wire [7:0] HWIF_OUT_WEIGHT_9,
    output wire [7:0] HWIF_OUT_WEIGHT_10,
    output wire [7:0] HWIF_OUT_WEIGHT_11,
    output wire [7:0] HWIF_OUT_WEIGHT_12,
    output wire [7:0] HWIF_OUT_WEIGHT_13,
    output wire [7:0] HWIF_OUT_WEIGHT_14,
    output wire [7:0] HWIF_OUT_WEIGHT_15,
    output wire [7:0] HWIF_OUT_WEIGHT_16,
    output wire [7:0] HWIF_OUT_WEIGHT_17,
    output wire [7:0] HWIF_OUT_WEIGHT_18,
    output wire [7:0] HWIF_OUT_WEIGHT_19,
    output wire [7:0] HWIF_OUT_WEIGHT_20,
    output wire [7:0] HWIF_OUT_WEIGHT_21,
    output wire [7:0] HWIF_OUT_WEIGHT_22,
    output wire [7:0] HWIF_OUT_WEIGHT_23,
    output wire [7:0] HWIF_OUT_WEIGHT_24,
    output wire [7:0] HWIF_OUT_WEIGHT_25,
    output wire [7:0] HWIF_OUT_WEIGHT_26,
    output wire [7:0] HWIF_OUT_WEIGHT_27,
    output wire [7:0] HWIF_OUT_WEIGHT_28,
    output wire [7:0] HWIF_OUT_WEIGHT_29,
    output wire [7:0] HWIF_OUT_WEIGHT_30,
    output wire [7:0] HWIF_OUT_WEIGHT_31,
    output wire [7:0] HWIF_OUT_WEIGHT_32,
    output wire [7:0] HWIF_OUT_WEIGHT_33,
    output wire [7:0] HWIF_OUT_WEIGHT_34,
    output wire [7:0] HWIF_OUT_WEIGHT_35,
    output wire [7:0] HWIF_OUT_BIAS
);

    reg rvalid;
    reg [7:0] rdata;
    reg wack;

    // Instantiate registers and declare their own signals. From a Software perspective, i.e. access
    // via the AXI4 Lite interface, Configuration registers are Write-only while Status and Delta
    // registers are Read-only

    // WEIGHT_0: Input weight 0
    reg weight_0_wreq;
    wire [7:0] weight_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_0_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_0_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_0_value_out)
    );
        
    // WEIGHT_1: Input weight 1
    reg weight_1_wreq;
    wire [7:0] weight_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_1_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_1_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_1_value_out)
    );
        
    // WEIGHT_2: Input weight 2
    reg weight_2_wreq;
    wire [7:0] weight_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_2_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_2_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_2_value_out)
    );
        
    // WEIGHT_3: Input weight 3
    reg weight_3_wreq;
    wire [7:0] weight_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_3_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_3_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_3_value_out)
    );
        
    // WEIGHT_4: Input weight 4
    reg weight_4_wreq;
    wire [7:0] weight_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_4_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_4_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_4_value_out)
    );
        
    // WEIGHT_5: Input weight 5
    reg weight_5_wreq;
    wire [7:0] weight_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_5_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_5_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_5_value_out)
    );
        
    // WEIGHT_6: Input weight 6
    reg weight_6_wreq;
    wire [7:0] weight_6_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_6_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_6_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_6_value_out)
    );
        
    // WEIGHT_7: Input weight 7
    reg weight_7_wreq;
    wire [7:0] weight_7_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_7_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_7_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_7_value_out)
    );
        
    // WEIGHT_8: Input weight 8
    reg weight_8_wreq;
    wire [7:0] weight_8_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_8_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_8_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_8_value_out)
    );
        
    // WEIGHT_9: Input weight 9
    reg weight_9_wreq;
    wire [7:0] weight_9_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_9_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_9_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_9_value_out)
    );
        
    // WEIGHT_10: Input weight 10
    reg weight_10_wreq;
    wire [7:0] weight_10_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_10_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_10_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_10_value_out)
    );
        
    // WEIGHT_11: Input weight 11
    reg weight_11_wreq;
    wire [7:0] weight_11_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_11_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_11_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_11_value_out)
    );
        
    // WEIGHT_12: Input weight 12
    reg weight_12_wreq;
    wire [7:0] weight_12_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_12_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_12_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_12_value_out)
    );
        
    // WEIGHT_13: Input weight 13
    reg weight_13_wreq;
    wire [7:0] weight_13_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_13_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_13_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_13_value_out)
    );
        
    // WEIGHT_14: Input weight 14
    reg weight_14_wreq;
    wire [7:0] weight_14_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_14_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_14_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_14_value_out)
    );
        
    // WEIGHT_15: Input weight 15
    reg weight_15_wreq;
    wire [7:0] weight_15_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_15_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_15_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_15_value_out)
    );
        
    // WEIGHT_16: Input weight 16
    reg weight_16_wreq;
    wire [7:0] weight_16_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_16_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_16_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_16_value_out)
    );
        
    // WEIGHT_17: Input weight 17
    reg weight_17_wreq;
    wire [7:0] weight_17_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_17_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_17_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_17_value_out)
    );
        
    // WEIGHT_18: Input weight 18
    reg weight_18_wreq;
    wire [7:0] weight_18_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_18_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_18_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_18_value_out)
    );
        
    // WEIGHT_19: Input weight 19
    reg weight_19_wreq;
    wire [7:0] weight_19_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_19_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_19_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_19_value_out)
    );
        
    // WEIGHT_20: Input weight 20
    reg weight_20_wreq;
    wire [7:0] weight_20_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_20_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_20_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_20_value_out)
    );
        
    // WEIGHT_21: Input weight 21
    reg weight_21_wreq;
    wire [7:0] weight_21_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_21_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_21_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_21_value_out)
    );
        
    // WEIGHT_22: Input weight 22
    reg weight_22_wreq;
    wire [7:0] weight_22_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_22_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_22_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_22_value_out)
    );
        
    // WEIGHT_23: Input weight 23
    reg weight_23_wreq;
    wire [7:0] weight_23_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_23_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_23_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_23_value_out)
    );
        
    // WEIGHT_24: Input weight 24
    reg weight_24_wreq;
    wire [7:0] weight_24_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_24_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_24_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_24_value_out)
    );
        
    // WEIGHT_25: Input weight 25
    reg weight_25_wreq;
    wire [7:0] weight_25_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_25_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_25_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_25_value_out)
    );
        
    // WEIGHT_26: Input weight 26
    reg weight_26_wreq;
    wire [7:0] weight_26_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_26_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_26_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_26_value_out)
    );
        
    // WEIGHT_27: Input weight 27
    reg weight_27_wreq;
    wire [7:0] weight_27_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_27_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_27_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_27_value_out)
    );
        
    // WEIGHT_28: Input weight 28
    reg weight_28_wreq;
    wire [7:0] weight_28_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_28_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_28_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_28_value_out)
    );
        
    // WEIGHT_29: Input weight 29
    reg weight_29_wreq;
    wire [7:0] weight_29_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_29_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_29_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_29_value_out)
    );
        
    // WEIGHT_30: Input weight 30
    reg weight_30_wreq;
    wire [7:0] weight_30_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_30_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_30_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_30_value_out)
    );
        
    // WEIGHT_31: Input weight 31
    reg weight_31_wreq;
    wire [7:0] weight_31_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_31_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_31_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_31_value_out)
    );
        
    // WEIGHT_32: Input weight 32
    reg weight_32_wreq;
    wire [7:0] weight_32_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_32_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_32_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_32_value_out)
    );
        
    // WEIGHT_33: Input weight 33
    reg weight_33_wreq;
    wire [7:0] weight_33_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_33_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_33_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_33_value_out)
    );
        
    // WEIGHT_34: Input weight 34
    reg weight_34_wreq;
    wire [7:0] weight_34_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_34_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_34_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_34_value_out)
    );
        
    // WEIGHT_35: Input weight 35
    reg weight_35_wreq;
    wire [7:0] weight_35_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    WEIGHT_35_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (weight_35_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (weight_35_value_out)
    );
        
    // BIAS: Input bias
    reg bias_wreq;
    wire [7:0] bias_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    BIAS_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (bias_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (bias_value_out)
    );
        
    // Write decoder
    always @(posedge CLK) begin
        wack <= 1'b0;
        weight_0_wreq <= 1'b0;
        weight_1_wreq <= 1'b0;
        weight_2_wreq <= 1'b0;
        weight_3_wreq <= 1'b0;
        weight_4_wreq <= 1'b0;
        weight_5_wreq <= 1'b0;
        weight_6_wreq <= 1'b0;
        weight_7_wreq <= 1'b0;
        weight_8_wreq <= 1'b0;
        weight_9_wreq <= 1'b0;
        weight_10_wreq <= 1'b0;
        weight_11_wreq <= 1'b0;
        weight_12_wreq <= 1'b0;
        weight_13_wreq <= 1'b0;
        weight_14_wreq <= 1'b0;
        weight_15_wreq <= 1'b0;
        weight_16_wreq <= 1'b0;
        weight_17_wreq <= 1'b0;
        weight_18_wreq <= 1'b0;
        weight_19_wreq <= 1'b0;
        weight_20_wreq <= 1'b0;
        weight_21_wreq <= 1'b0;
        weight_22_wreq <= 1'b0;
        weight_23_wreq <= 1'b0;
        weight_24_wreq <= 1'b0;
        weight_25_wreq <= 1'b0;
        weight_26_wreq <= 1'b0;
        weight_27_wreq <= 1'b0;
        weight_28_wreq <= 1'b0;
        weight_29_wreq <= 1'b0;
        weight_30_wreq <= 1'b0;
        weight_31_wreq <= 1'b0;
        weight_32_wreq <= 1'b0;
        weight_33_wreq <= 1'b0;
        weight_34_wreq <= 1'b0;
        weight_35_wreq <= 1'b0;
        bias_wreq <= 1'b0;

        if(WREQ) begin
            wack <= 1'b1;

            case(WADDR)
               `HL_NEURON_REGFILE_WEIGHT_0_OFFSET : begin weight_0_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_1_OFFSET : begin weight_1_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_2_OFFSET : begin weight_2_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_3_OFFSET : begin weight_3_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_4_OFFSET : begin weight_4_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_5_OFFSET : begin weight_5_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_6_OFFSET : begin weight_6_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_7_OFFSET : begin weight_7_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_8_OFFSET : begin weight_8_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_9_OFFSET : begin weight_9_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_10_OFFSET : begin weight_10_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_11_OFFSET : begin weight_11_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_12_OFFSET : begin weight_12_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_13_OFFSET : begin weight_13_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_14_OFFSET : begin weight_14_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_15_OFFSET : begin weight_15_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_16_OFFSET : begin weight_16_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_17_OFFSET : begin weight_17_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_18_OFFSET : begin weight_18_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_19_OFFSET : begin weight_19_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_20_OFFSET : begin weight_20_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_21_OFFSET : begin weight_21_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_22_OFFSET : begin weight_22_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_23_OFFSET : begin weight_23_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_24_OFFSET : begin weight_24_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_25_OFFSET : begin weight_25_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_26_OFFSET : begin weight_26_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_27_OFFSET : begin weight_27_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_28_OFFSET : begin weight_28_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_29_OFFSET : begin weight_29_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_30_OFFSET : begin weight_30_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_31_OFFSET : begin weight_31_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_32_OFFSET : begin weight_32_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_33_OFFSET : begin weight_33_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_34_OFFSET : begin weight_34_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_WEIGHT_35_OFFSET : begin weight_35_wreq <= 1'b1; end
               `HL_NEURON_REGFILE_BIAS_OFFSET : begin bias_wreq <= 1'b1; end
            endcase
        end
    end

    // Create Read strobe from Read request edge
    always @(posedge CLK) begin
        rvalid <= RREQ;
    end

    // Read decoder
    always @(RADDR) begin
        case(RADDR)
            `HL_NEURON_REGFILE_WEIGHT_0_OFFSET : begin rdata = weight_0_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_1_OFFSET : begin rdata = weight_1_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_2_OFFSET : begin rdata = weight_2_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_3_OFFSET : begin rdata = weight_3_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_4_OFFSET : begin rdata = weight_4_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_5_OFFSET : begin rdata = weight_5_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_6_OFFSET : begin rdata = weight_6_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_7_OFFSET : begin rdata = weight_7_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_8_OFFSET : begin rdata = weight_8_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_9_OFFSET : begin rdata = weight_9_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_10_OFFSET : begin rdata = weight_10_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_11_OFFSET : begin rdata = weight_11_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_12_OFFSET : begin rdata = weight_12_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_13_OFFSET : begin rdata = weight_13_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_14_OFFSET : begin rdata = weight_14_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_15_OFFSET : begin rdata = weight_15_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_16_OFFSET : begin rdata = weight_16_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_17_OFFSET : begin rdata = weight_17_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_18_OFFSET : begin rdata = weight_18_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_19_OFFSET : begin rdata = weight_19_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_20_OFFSET : begin rdata = weight_20_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_21_OFFSET : begin rdata = weight_21_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_22_OFFSET : begin rdata = weight_22_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_23_OFFSET : begin rdata = weight_23_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_24_OFFSET : begin rdata = weight_24_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_25_OFFSET : begin rdata = weight_25_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_26_OFFSET : begin rdata = weight_26_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_27_OFFSET : begin rdata = weight_27_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_28_OFFSET : begin rdata = weight_28_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_29_OFFSET : begin rdata = weight_29_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_30_OFFSET : begin rdata = weight_30_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_31_OFFSET : begin rdata = weight_31_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_32_OFFSET : begin rdata = weight_32_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_33_OFFSET : begin rdata = weight_33_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_34_OFFSET : begin rdata = weight_34_value_out; end
            `HL_NEURON_REGFILE_WEIGHT_35_OFFSET : begin rdata = weight_35_value_out; end
            `HL_NEURON_REGFILE_BIAS_OFFSET : begin rdata = bias_value_out; end
            default : begin rdata = {8{1'b1}}; end
        endcase
    end

    // Pinout
    assign RVALID   = rvalid;
    assign RDATA    = rdata;
    assign WACK     = wack;

    // Compose and decompose CSR bundle data. Control registers (those written by the Software and
    // read by the Hardware) are put over the  HWIF_OUT_*  ports; Status registers (those written by
    // the Hardware and read by the Software) are get over the  HWIF_IN_*  ports
    assign HWIF_OUT_WEIGHT_0 = weight_0_value_out;
    assign HWIF_OUT_WEIGHT_1 = weight_1_value_out;
    assign HWIF_OUT_WEIGHT_2 = weight_2_value_out;
    assign HWIF_OUT_WEIGHT_3 = weight_3_value_out;
    assign HWIF_OUT_WEIGHT_4 = weight_4_value_out;
    assign HWIF_OUT_WEIGHT_5 = weight_5_value_out;
    assign HWIF_OUT_WEIGHT_6 = weight_6_value_out;
    assign HWIF_OUT_WEIGHT_7 = weight_7_value_out;
    assign HWIF_OUT_WEIGHT_8 = weight_8_value_out;
    assign HWIF_OUT_WEIGHT_9 = weight_9_value_out;
    assign HWIF_OUT_WEIGHT_10 = weight_10_value_out;
    assign HWIF_OUT_WEIGHT_11 = weight_11_value_out;
    assign HWIF_OUT_WEIGHT_12 = weight_12_value_out;
    assign HWIF_OUT_WEIGHT_13 = weight_13_value_out;
    assign HWIF_OUT_WEIGHT_14 = weight_14_value_out;
    assign HWIF_OUT_WEIGHT_15 = weight_15_value_out;
    assign HWIF_OUT_WEIGHT_16 = weight_16_value_out;
    assign HWIF_OUT_WEIGHT_17 = weight_17_value_out;
    assign HWIF_OUT_WEIGHT_18 = weight_18_value_out;
    assign HWIF_OUT_WEIGHT_19 = weight_19_value_out;
    assign HWIF_OUT_WEIGHT_20 = weight_20_value_out;
    assign HWIF_OUT_WEIGHT_21 = weight_21_value_out;
    assign HWIF_OUT_WEIGHT_22 = weight_22_value_out;
    assign HWIF_OUT_WEIGHT_23 = weight_23_value_out;
    assign HWIF_OUT_WEIGHT_24 = weight_24_value_out;
    assign HWIF_OUT_WEIGHT_25 = weight_25_value_out;
    assign HWIF_OUT_WEIGHT_26 = weight_26_value_out;
    assign HWIF_OUT_WEIGHT_27 = weight_27_value_out;
    assign HWIF_OUT_WEIGHT_28 = weight_28_value_out;
    assign HWIF_OUT_WEIGHT_29 = weight_29_value_out;
    assign HWIF_OUT_WEIGHT_30 = weight_30_value_out;
    assign HWIF_OUT_WEIGHT_31 = weight_31_value_out;
    assign HWIF_OUT_WEIGHT_32 = weight_32_value_out;
    assign HWIF_OUT_WEIGHT_33 = weight_33_value_out;
    assign HWIF_OUT_WEIGHT_34 = weight_34_value_out;
    assign HWIF_OUT_WEIGHT_35 = weight_35_value_out;
    assign HWIF_OUT_BIAS = bias_value_out;
endmodule

`default_nettype wire