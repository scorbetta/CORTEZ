// Generated by  grogu  starting from JINJA templated  MODULE_TEMPLATE_NATIVE.v  file

`default_nettype none

`include "CORE_REGFILE.vh"

// Native interface based design for large and distributed register files (used in conjunction with
// the SCI configuration ring)
module CORE_REGFILE (
    // Clock and reset
    input wire CLK,
    input wire RSTN,
    // Register interface
    input wire WREQ,
    input wire [4:0] WADDR,
    input wire [7:0] WDATA,
    output wire WACK,
    input wire RREQ,
    input wire [4:0] RADDR,
    output wire [7:0] RDATA,
    output wire RVALID,
    // Register bundles
    output wire [7:0] HWIF_OUT_DBUG_REG_0,
    output wire [7:0] HWIF_OUT_DBUG_REG_1,
    output wire [7:0] HWIF_OUT_DBUG_REG_2,
    output wire [7:0] HWIF_OUT_DBUG_REG_3,
    output wire [7:0] HWIF_OUT_INPUT_GRID_0,
    output wire [7:0] HWIF_OUT_INPUT_GRID_1,
    output wire [7:0] HWIF_OUT_INPUT_GRID_2,
    output wire [7:0] HWIF_OUT_INPUT_GRID_3,
    output wire [7:0] HWIF_OUT_INPUT_GRID_4,
    output wire [7:0] HWIF_OUT_INPUT_GRID_5,
    output wire [7:0] HWIF_OUT_INPUT_GRID_6,
    output wire [7:0] HWIF_OUT_INPUT_GRID_7,
    output wire [7:0] HWIF_OUT_INPUT_GRID_8,
    output wire [7:0] HWIF_OUT_INPUT_GRID_9,
    output wire [7:0] HWIF_OUT_INPUT_GRID_10,
    output wire [7:0] HWIF_OUT_INPUT_GRID_11,
    output wire [7:0] HWIF_OUT_INPUT_GRID_12,
    output wire [7:0] HWIF_OUT_INPUT_GRID_13,
    output wire [7:0] HWIF_OUT_INPUT_GRID_14,
    output wire [7:0] HWIF_OUT_INPUT_GRID_15,
    input wire [7:0] HWIF_IN_OUTPUT_SOLUTION_0,
    input wire [7:0] HWIF_IN_OUTPUT_SOLUTION_1,
    input wire [7:0] HWIF_IN_OUTPUT_SOLUTION_2,
    input wire [7:0] HWIF_IN_OUTPUT_SOLUTION_3,
    input wire [7:0] HWIF_IN_OUTPUT_SOLUTION_4,
    output wire [7:0] HWIF_OUT_CORE_CTRL,
    output wire [7:0] HWIF_OUT_CORE_DEBUG_INFO,
    input wire [7:0] HWIF_IN_CORE_STATUS,
    output wire [7:0] HWIF_OUT_SEVENSEG_0,
    output wire [7:0] HWIF_OUT_SEVENSEG_1,
    output wire [7:0] HWIF_OUT_SEVENSEG_2,
    output wire [7:0] HWIF_OUT_SEVENSEG_3
);

    reg rvalid;
    reg [7:0] rdata;
    reg wack;

    // Instantiate registers and declare their own signals. From a Software perspective, i.e. access
    // via the AXI4 Lite interface, Configuration registers are Write-only while Status and Delta
    // registers are Read-only

    // DBUG_REG_0: General-purpose register for debug
    reg dbug_reg_0_wreq;
    wire [7:0] dbug_reg_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    DBUG_REG_0_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (dbug_reg_0_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (dbug_reg_0_value_out)
    );
        
    // DBUG_REG_1: General-purpose register for debug
    reg dbug_reg_1_wreq;
    wire [7:0] dbug_reg_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    DBUG_REG_1_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (dbug_reg_1_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (dbug_reg_1_value_out)
    );
        
    // DBUG_REG_2: General-purpose register for debug
    reg dbug_reg_2_wreq;
    wire [7:0] dbug_reg_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    DBUG_REG_2_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (dbug_reg_2_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (dbug_reg_2_value_out)
    );
        
    // DBUG_REG_3: General-purpose register for debug
    reg dbug_reg_3_wreq;
    wire [7:0] dbug_reg_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    DBUG_REG_3_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (dbug_reg_3_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (dbug_reg_3_value_out)
    );
        
    // INPUT_GRID_0: Pixel 0 of the input character
    reg input_grid_0_wreq;
    wire [7:0] input_grid_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_0_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_0_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_0_value_out)
    );
        
    // INPUT_GRID_1: Pixel 1 of the input character
    reg input_grid_1_wreq;
    wire [7:0] input_grid_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_1_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_1_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_1_value_out)
    );
        
    // INPUT_GRID_2: Pixel 2 of the input character
    reg input_grid_2_wreq;
    wire [7:0] input_grid_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_2_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_2_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_2_value_out)
    );
        
    // INPUT_GRID_3: Pixel 3 of the input character
    reg input_grid_3_wreq;
    wire [7:0] input_grid_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_3_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_3_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_3_value_out)
    );
        
    // INPUT_GRID_4: Pixel 4 of the input character
    reg input_grid_4_wreq;
    wire [7:0] input_grid_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_4_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_4_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_4_value_out)
    );
        
    // INPUT_GRID_5: Pixel 5 of the input character
    reg input_grid_5_wreq;
    wire [7:0] input_grid_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_5_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_5_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_5_value_out)
    );
        
    // INPUT_GRID_6: Pixel 6 of the input character
    reg input_grid_6_wreq;
    wire [7:0] input_grid_6_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_6_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_6_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_6_value_out)
    );
        
    // INPUT_GRID_7: Pixel 7 of the input character
    reg input_grid_7_wreq;
    wire [7:0] input_grid_7_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_7_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_7_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_7_value_out)
    );
        
    // INPUT_GRID_8: Pixel 8 of the input character
    reg input_grid_8_wreq;
    wire [7:0] input_grid_8_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_8_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_8_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_8_value_out)
    );
        
    // INPUT_GRID_9: Pixel 9 of the input character
    reg input_grid_9_wreq;
    wire [7:0] input_grid_9_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_9_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_9_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_9_value_out)
    );
        
    // INPUT_GRID_10: Pixel 10 of the input character
    reg input_grid_10_wreq;
    wire [7:0] input_grid_10_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_10_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_10_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_10_value_out)
    );
        
    // INPUT_GRID_11: Pixel 11 of the input character
    reg input_grid_11_wreq;
    wire [7:0] input_grid_11_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_11_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_11_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_11_value_out)
    );
        
    // INPUT_GRID_12: Pixel 12 of the input character
    reg input_grid_12_wreq;
    wire [7:0] input_grid_12_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_12_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_12_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_12_value_out)
    );
        
    // INPUT_GRID_13: Pixel 13 of the input character
    reg input_grid_13_wreq;
    wire [7:0] input_grid_13_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_13_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_13_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_13_value_out)
    );
        
    // INPUT_GRID_14: Pixel 14 of the input character
    reg input_grid_14_wreq;
    wire [7:0] input_grid_14_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_14_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_14_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_14_value_out)
    );
        
    // INPUT_GRID_15: Pixel 15 of the input character
    reg input_grid_15_wreq;
    wire [7:0] input_grid_15_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    INPUT_GRID_15_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (input_grid_15_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (input_grid_15_value_out)
    );
        
    // OUTPUT_SOLUTION_0: Digit 0 of the output solution
    wire [7:0] output_solution_0_value_in;
    wire [7:0] output_solution_0_value_out;
    RO_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    OUTPUT_SOLUTION_0_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .VALUE_IN   (output_solution_0_value_in),
        .VALUE_OUT  (output_solution_0_value_out)
    );
        
    // OUTPUT_SOLUTION_1: Digit 1 of the output solution
    wire [7:0] output_solution_1_value_in;
    wire [7:0] output_solution_1_value_out;
    RO_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    OUTPUT_SOLUTION_1_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .VALUE_IN   (output_solution_1_value_in),
        .VALUE_OUT  (output_solution_1_value_out)
    );
        
    // OUTPUT_SOLUTION_2: Digit 2 of the output solution
    wire [7:0] output_solution_2_value_in;
    wire [7:0] output_solution_2_value_out;
    RO_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    OUTPUT_SOLUTION_2_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .VALUE_IN   (output_solution_2_value_in),
        .VALUE_OUT  (output_solution_2_value_out)
    );
        
    // OUTPUT_SOLUTION_3: Digit 3 of the output solution
    wire [7:0] output_solution_3_value_in;
    wire [7:0] output_solution_3_value_out;
    RO_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    OUTPUT_SOLUTION_3_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .VALUE_IN   (output_solution_3_value_in),
        .VALUE_OUT  (output_solution_3_value_out)
    );
        
    // OUTPUT_SOLUTION_4: Digit 4 of the output solution
    wire [7:0] output_solution_4_value_in;
    wire [7:0] output_solution_4_value_out;
    RO_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (0)
    )
    OUTPUT_SOLUTION_4_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .VALUE_IN   (output_solution_4_value_in),
        .VALUE_OUT  (output_solution_4_value_out)
    );
        
    // CORE_CTRL: Core control register
    reg core_ctrl_wreq;
    wire [7:0] core_ctrl_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    CORE_CTRL_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (core_ctrl_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (core_ctrl_value_out)
    );
        
    // CORE_DEBUG_INFO: Firmware-initiated debug information
    reg core_debug_info_wreq;
    wire [7:0] core_debug_info_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    CORE_DEBUG_INFO_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (core_debug_info_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (core_debug_info_value_out)
    );
        
    // CORE_STATUS: Core status register
    wire [7:0] core_status_value_in;
    wire [7:0] core_status_value_out;
    RO_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    CORE_STATUS_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .VALUE_IN   (core_status_value_in),
        .VALUE_OUT  (core_status_value_out)
    );
        
    // SEVENSEG_0: 7-segments display contents: .gfedcba
    reg sevenseg_0_wreq;
    wire [7:0] sevenseg_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    SEVENSEG_0_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (sevenseg_0_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (sevenseg_0_value_out)
    );
        
    // SEVENSEG_1: 7-segments display contents: .gfedcba
    reg sevenseg_1_wreq;
    wire [7:0] sevenseg_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    SEVENSEG_1_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (sevenseg_1_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (sevenseg_1_value_out)
    );
        
    // SEVENSEG_2: 7-segments display contents: .gfedcba
    reg sevenseg_2_wreq;
    wire [7:0] sevenseg_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    SEVENSEG_2_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (sevenseg_2_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (sevenseg_2_value_out)
    );
        
    // SEVENSEG_3: 7-segments display contents: .gfedcba
    reg sevenseg_3_wreq;
    wire [7:0] sevenseg_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    SEVENSEG_3_REG (
        .CLK        (CLK),
        .RSTN       (RSTN),
        .WEN        (sevenseg_3_wreq),
        .VALUE_IN   (WDATA),
        .VALUE_OUT  (sevenseg_3_value_out)
    );
        
    // Write decoder
    always @(posedge CLK) begin
        wack <= 1'b0;
        dbug_reg_0_wreq <= 1'b0;
        dbug_reg_1_wreq <= 1'b0;
        dbug_reg_2_wreq <= 1'b0;
        dbug_reg_3_wreq <= 1'b0;
        input_grid_0_wreq <= 1'b0;
        input_grid_1_wreq <= 1'b0;
        input_grid_2_wreq <= 1'b0;
        input_grid_3_wreq <= 1'b0;
        input_grid_4_wreq <= 1'b0;
        input_grid_5_wreq <= 1'b0;
        input_grid_6_wreq <= 1'b0;
        input_grid_7_wreq <= 1'b0;
        input_grid_8_wreq <= 1'b0;
        input_grid_9_wreq <= 1'b0;
        input_grid_10_wreq <= 1'b0;
        input_grid_11_wreq <= 1'b0;
        input_grid_12_wreq <= 1'b0;
        input_grid_13_wreq <= 1'b0;
        input_grid_14_wreq <= 1'b0;
        input_grid_15_wreq <= 1'b0;
        core_ctrl_wreq <= 1'b0;
        core_debug_info_wreq <= 1'b0;
        sevenseg_0_wreq <= 1'b0;
        sevenseg_1_wreq <= 1'b0;
        sevenseg_2_wreq <= 1'b0;
        sevenseg_3_wreq <= 1'b0;

        if(WREQ) begin
            wack <= 1'b1;

            case(WADDR)
               `CORE_REGFILE_DBUG_REG_0_OFFSET : begin dbug_reg_0_wreq <= 1'b1; end
               `CORE_REGFILE_DBUG_REG_1_OFFSET : begin dbug_reg_1_wreq <= 1'b1; end
               `CORE_REGFILE_DBUG_REG_2_OFFSET : begin dbug_reg_2_wreq <= 1'b1; end
               `CORE_REGFILE_DBUG_REG_3_OFFSET : begin dbug_reg_3_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_0_OFFSET : begin input_grid_0_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_1_OFFSET : begin input_grid_1_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_2_OFFSET : begin input_grid_2_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_3_OFFSET : begin input_grid_3_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_4_OFFSET : begin input_grid_4_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_5_OFFSET : begin input_grid_5_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_6_OFFSET : begin input_grid_6_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_7_OFFSET : begin input_grid_7_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_8_OFFSET : begin input_grid_8_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_9_OFFSET : begin input_grid_9_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_10_OFFSET : begin input_grid_10_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_11_OFFSET : begin input_grid_11_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_12_OFFSET : begin input_grid_12_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_13_OFFSET : begin input_grid_13_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_14_OFFSET : begin input_grid_14_wreq <= 1'b1; end
               `CORE_REGFILE_INPUT_GRID_15_OFFSET : begin input_grid_15_wreq <= 1'b1; end
               `CORE_REGFILE_CORE_CTRL_OFFSET : begin core_ctrl_wreq <= 1'b1; end
               `CORE_REGFILE_CORE_DEBUG_INFO_OFFSET : begin core_debug_info_wreq <= 1'b1; end
               `CORE_REGFILE_SEVENSEG_0_OFFSET : begin sevenseg_0_wreq <= 1'b1; end
               `CORE_REGFILE_SEVENSEG_1_OFFSET : begin sevenseg_1_wreq <= 1'b1; end
               `CORE_REGFILE_SEVENSEG_2_OFFSET : begin sevenseg_2_wreq <= 1'b1; end
               `CORE_REGFILE_SEVENSEG_3_OFFSET : begin sevenseg_3_wreq <= 1'b1; end
            endcase
        end
    end

    // Create Read strobe from Read request edge
    always @(posedge CLK) begin
        rvalid <= RREQ;
    end

    // Read decoder
    always @(RADDR) begin
        case(RADDR)
            `CORE_REGFILE_DBUG_REG_0_OFFSET : begin rdata = dbug_reg_0_value_out; end
            `CORE_REGFILE_DBUG_REG_1_OFFSET : begin rdata = dbug_reg_1_value_out; end
            `CORE_REGFILE_DBUG_REG_2_OFFSET : begin rdata = dbug_reg_2_value_out; end
            `CORE_REGFILE_DBUG_REG_3_OFFSET : begin rdata = dbug_reg_3_value_out; end
            `CORE_REGFILE_INPUT_GRID_0_OFFSET : begin rdata = input_grid_0_value_out; end
            `CORE_REGFILE_INPUT_GRID_1_OFFSET : begin rdata = input_grid_1_value_out; end
            `CORE_REGFILE_INPUT_GRID_2_OFFSET : begin rdata = input_grid_2_value_out; end
            `CORE_REGFILE_INPUT_GRID_3_OFFSET : begin rdata = input_grid_3_value_out; end
            `CORE_REGFILE_INPUT_GRID_4_OFFSET : begin rdata = input_grid_4_value_out; end
            `CORE_REGFILE_INPUT_GRID_5_OFFSET : begin rdata = input_grid_5_value_out; end
            `CORE_REGFILE_INPUT_GRID_6_OFFSET : begin rdata = input_grid_6_value_out; end
            `CORE_REGFILE_INPUT_GRID_7_OFFSET : begin rdata = input_grid_7_value_out; end
            `CORE_REGFILE_INPUT_GRID_8_OFFSET : begin rdata = input_grid_8_value_out; end
            `CORE_REGFILE_INPUT_GRID_9_OFFSET : begin rdata = input_grid_9_value_out; end
            `CORE_REGFILE_INPUT_GRID_10_OFFSET : begin rdata = input_grid_10_value_out; end
            `CORE_REGFILE_INPUT_GRID_11_OFFSET : begin rdata = input_grid_11_value_out; end
            `CORE_REGFILE_INPUT_GRID_12_OFFSET : begin rdata = input_grid_12_value_out; end
            `CORE_REGFILE_INPUT_GRID_13_OFFSET : begin rdata = input_grid_13_value_out; end
            `CORE_REGFILE_INPUT_GRID_14_OFFSET : begin rdata = input_grid_14_value_out; end
            `CORE_REGFILE_INPUT_GRID_15_OFFSET : begin rdata = input_grid_15_value_out; end
            `CORE_REGFILE_OUTPUT_SOLUTION_0_OFFSET : begin rdata = output_solution_0_value_out; end
            `CORE_REGFILE_OUTPUT_SOLUTION_1_OFFSET : begin rdata = output_solution_1_value_out; end
            `CORE_REGFILE_OUTPUT_SOLUTION_2_OFFSET : begin rdata = output_solution_2_value_out; end
            `CORE_REGFILE_OUTPUT_SOLUTION_3_OFFSET : begin rdata = output_solution_3_value_out; end
            `CORE_REGFILE_OUTPUT_SOLUTION_4_OFFSET : begin rdata = output_solution_4_value_out; end
            `CORE_REGFILE_CORE_CTRL_OFFSET : begin rdata = core_ctrl_value_out; end
            `CORE_REGFILE_CORE_DEBUG_INFO_OFFSET : begin rdata = core_debug_info_value_out; end
            `CORE_REGFILE_CORE_STATUS_OFFSET : begin rdata = core_status_value_out; end
            `CORE_REGFILE_SEVENSEG_0_OFFSET : begin rdata = sevenseg_0_value_out; end
            `CORE_REGFILE_SEVENSEG_1_OFFSET : begin rdata = sevenseg_1_value_out; end
            `CORE_REGFILE_SEVENSEG_2_OFFSET : begin rdata = sevenseg_2_value_out; end
            `CORE_REGFILE_SEVENSEG_3_OFFSET : begin rdata = sevenseg_3_value_out; end
            default : begin rdata = {8{1'b1}}; end
        endcase
    end

    // Pinout
    assign RVALID   = rvalid;
    assign RDATA    = rdata;
    assign WACK     = wack;

    // Compose and decompose CSR bundle data. Control registers (those written by the Software and
    // read by the Hardware) are put over the  HWIF_OUT_*  ports; Status registers (those written by
    // the Hardware and read by the Software) are get over the  HWIF_IN_*  ports
    assign HWIF_OUT_DBUG_REG_0 = dbug_reg_0_value_out;
    assign HWIF_OUT_DBUG_REG_1 = dbug_reg_1_value_out;
    assign HWIF_OUT_DBUG_REG_2 = dbug_reg_2_value_out;
    assign HWIF_OUT_DBUG_REG_3 = dbug_reg_3_value_out;
    assign HWIF_OUT_INPUT_GRID_0 = input_grid_0_value_out;
    assign HWIF_OUT_INPUT_GRID_1 = input_grid_1_value_out;
    assign HWIF_OUT_INPUT_GRID_2 = input_grid_2_value_out;
    assign HWIF_OUT_INPUT_GRID_3 = input_grid_3_value_out;
    assign HWIF_OUT_INPUT_GRID_4 = input_grid_4_value_out;
    assign HWIF_OUT_INPUT_GRID_5 = input_grid_5_value_out;
    assign HWIF_OUT_INPUT_GRID_6 = input_grid_6_value_out;
    assign HWIF_OUT_INPUT_GRID_7 = input_grid_7_value_out;
    assign HWIF_OUT_INPUT_GRID_8 = input_grid_8_value_out;
    assign HWIF_OUT_INPUT_GRID_9 = input_grid_9_value_out;
    assign HWIF_OUT_INPUT_GRID_10 = input_grid_10_value_out;
    assign HWIF_OUT_INPUT_GRID_11 = input_grid_11_value_out;
    assign HWIF_OUT_INPUT_GRID_12 = input_grid_12_value_out;
    assign HWIF_OUT_INPUT_GRID_13 = input_grid_13_value_out;
    assign HWIF_OUT_INPUT_GRID_14 = input_grid_14_value_out;
    assign HWIF_OUT_INPUT_GRID_15 = input_grid_15_value_out;
    assign output_solution_0_value_in = HWIF_IN_OUTPUT_SOLUTION_0;
    assign output_solution_1_value_in = HWIF_IN_OUTPUT_SOLUTION_1;
    assign output_solution_2_value_in = HWIF_IN_OUTPUT_SOLUTION_2;
    assign output_solution_3_value_in = HWIF_IN_OUTPUT_SOLUTION_3;
    assign output_solution_4_value_in = HWIF_IN_OUTPUT_SOLUTION_4;
    assign HWIF_OUT_CORE_CTRL = core_ctrl_value_out;
    assign HWIF_OUT_CORE_DEBUG_INFO = core_debug_info_value_out;
    assign core_status_value_in = HWIF_IN_CORE_STATUS;
    assign HWIF_OUT_SEVENSEG_0 = sevenseg_0_value_out;
    assign HWIF_OUT_SEVENSEG_1 = sevenseg_1_value_out;
    assign HWIF_OUT_SEVENSEG_2 = sevenseg_2_value_out;
    assign HWIF_OUT_SEVENSEG_3 = sevenseg_3_value_out;
endmodule

`default_nettype wire