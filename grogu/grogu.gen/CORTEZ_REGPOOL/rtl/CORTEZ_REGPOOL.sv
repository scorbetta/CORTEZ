// Generated by  grogu  starting from JINJA templated  MODULE_TEMPLATE.sv  file

`timescale 1ns/100ps

`include "CORTEZ_REGPOOL.svh"

module CORTEZ_REGPOOL (
    // Clock
    input ACLK,
    // Active-low synchronous reset
    input ARESETN,
    // AXI interface
    axi4l_if.slave AXIL,
    // Register bundles
    input cortez_regpool_pkg::regpool__in_t hwif_in,
    output cortez_regpool_pkg::regpool__out_t hwif_out
);

    logic regpool_ren;
    logic [31:0] regpool_raddr;
    logic [7:0] regpool_rdata;
    logic regpool_rvalid;
    logic regpool_wen;
    logic regpool_wen_resampled;
    logic [31:0] regpool_waddr;
    logic [7:0] regpool_wdata;

    // AXI4 Lite to Native bridge
    AXIL2NATIVE #(
        .DATA_WIDTH (8),
        .ADDR_WIDTH (32)
    )
    AXIL2NATIVE_0 (
        .AXI_ACLK       (ACLK),
        .AXI_ARESETN    (ARESETN),
        .AXI_AWADDR     (AXIL.awaddr),
        .AXI_AWPROT     (AXIL.awprot),
        .AXI_AWVALID    (AXIL.awvalid),
        .AXI_AWREADY    (AXIL.awready),
        .AXI_WDATA      (AXIL.wdata),
        .AXI_WSTRB      (AXIL.wstrb),
        .AXI_WVALID     (AXIL.wvalid),
        .AXI_WREADY     (AXIL.wready),
        .AXI_BRESP      (AXIL.bresp),
        .AXI_BVALID     (AXIL.bvalid),
        .AXI_BREADY     (AXIL.bready),
        .AXI_ARADDR     (AXIL.araddr),
        .AXI_ARPROT     (AXIL.arprot),
        .AXI_ARVALID    (AXIL.arvalid),
        .AXI_ARREADY    (AXIL.arready),
        .AXI_RDATA      (AXIL.rdata),
        .AXI_RRESP      (AXIL.rresp),
        .AXI_RVALID     (AXIL.rvalid),
        .AXI_RREADY     (AXIL.rready),
        .WEN            (regpool_wen),
        .WADDR          (regpool_waddr),
        .WDATA          (regpool_wdata),
        .WACK           (), // Unused
        .REN            (regpool_ren),
        .RADDR          (regpool_raddr),
        .RDATA          (regpool_rdata),
        .RVALID         (regpool_rvalid)
    );

    // Instantiate registers and declare their own signals. From a Software perspective, i.e. access
    // via the AXI4 Lite interface, Configuration registers are Write-only while Status and Delta
    // registers are Read-only

    // HL_WEIGHTS_0_0: Weights for neuron 0 of the hidden layer
    logic hl_weights_0_0_wreq;
    logic hl_weights_0_0_wreq_filtered;
    logic [7:0] hl_weights_0_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_0_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_0_0_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_0_0_value_out)
    );
        
    // HL_WEIGHTS_0_1: Weights for neuron 0 of the hidden layer
    logic hl_weights_0_1_wreq;
    logic hl_weights_0_1_wreq_filtered;
    logic [7:0] hl_weights_0_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_0_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_0_1_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_0_1_value_out)
    );
        
    // HL_WEIGHTS_0_2: Weights for neuron 0 of the hidden layer
    logic hl_weights_0_2_wreq;
    logic hl_weights_0_2_wreq_filtered;
    logic [7:0] hl_weights_0_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_0_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_0_2_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_0_2_value_out)
    );
        
    // HL_WEIGHTS_0_3: Weights for neuron 0 of the hidden layer
    logic hl_weights_0_3_wreq;
    logic hl_weights_0_3_wreq_filtered;
    logic [7:0] hl_weights_0_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_0_3_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_0_3_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_0_3_value_out)
    );
        
    // HL_WEIGHTS_0_4: Weights for neuron 0 of the hidden layer
    logic hl_weights_0_4_wreq;
    logic hl_weights_0_4_wreq_filtered;
    logic [7:0] hl_weights_0_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_0_4_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_0_4_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_0_4_value_out)
    );
        
    // HL_WEIGHTS_0_5: Weights for neuron 0 of the hidden layer
    logic hl_weights_0_5_wreq;
    logic hl_weights_0_5_wreq_filtered;
    logic [7:0] hl_weights_0_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_0_5_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_0_5_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_0_5_value_out)
    );
        
    // HL_WEIGHTS_0_6: Weights for neuron 0 of the hidden layer
    logic hl_weights_0_6_wreq;
    logic hl_weights_0_6_wreq_filtered;
    logic [7:0] hl_weights_0_6_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_0_6_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_0_6_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_0_6_value_out)
    );
        
    // HL_WEIGHTS_0_7: Weights for neuron 0 of the hidden layer
    logic hl_weights_0_7_wreq;
    logic hl_weights_0_7_wreq_filtered;
    logic [7:0] hl_weights_0_7_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_0_7_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_0_7_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_0_7_value_out)
    );
        
    // HL_WEIGHTS_0_8: Weights for neuron 0 of the hidden layer
    logic hl_weights_0_8_wreq;
    logic hl_weights_0_8_wreq_filtered;
    logic [7:0] hl_weights_0_8_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_0_8_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_0_8_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_0_8_value_out)
    );
        
    // HL_WEIGHTS_1_0: Weights for neuron 1 of the hidden layer
    logic hl_weights_1_0_wreq;
    logic hl_weights_1_0_wreq_filtered;
    logic [7:0] hl_weights_1_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_1_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_1_0_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_1_0_value_out)
    );
        
    // HL_WEIGHTS_1_1: Weights for neuron 1 of the hidden layer
    logic hl_weights_1_1_wreq;
    logic hl_weights_1_1_wreq_filtered;
    logic [7:0] hl_weights_1_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_1_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_1_1_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_1_1_value_out)
    );
        
    // HL_WEIGHTS_1_2: Weights for neuron 1 of the hidden layer
    logic hl_weights_1_2_wreq;
    logic hl_weights_1_2_wreq_filtered;
    logic [7:0] hl_weights_1_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_1_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_1_2_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_1_2_value_out)
    );
        
    // HL_WEIGHTS_1_3: Weights for neuron 1 of the hidden layer
    logic hl_weights_1_3_wreq;
    logic hl_weights_1_3_wreq_filtered;
    logic [7:0] hl_weights_1_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_1_3_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_1_3_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_1_3_value_out)
    );
        
    // HL_WEIGHTS_1_4: Weights for neuron 1 of the hidden layer
    logic hl_weights_1_4_wreq;
    logic hl_weights_1_4_wreq_filtered;
    logic [7:0] hl_weights_1_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_1_4_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_1_4_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_1_4_value_out)
    );
        
    // HL_WEIGHTS_1_5: Weights for neuron 1 of the hidden layer
    logic hl_weights_1_5_wreq;
    logic hl_weights_1_5_wreq_filtered;
    logic [7:0] hl_weights_1_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_1_5_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_1_5_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_1_5_value_out)
    );
        
    // HL_WEIGHTS_1_6: Weights for neuron 1 of the hidden layer
    logic hl_weights_1_6_wreq;
    logic hl_weights_1_6_wreq_filtered;
    logic [7:0] hl_weights_1_6_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_1_6_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_1_6_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_1_6_value_out)
    );
        
    // HL_WEIGHTS_1_7: Weights for neuron 1 of the hidden layer
    logic hl_weights_1_7_wreq;
    logic hl_weights_1_7_wreq_filtered;
    logic [7:0] hl_weights_1_7_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_1_7_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_1_7_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_1_7_value_out)
    );
        
    // HL_WEIGHTS_1_8: Weights for neuron 1 of the hidden layer
    logic hl_weights_1_8_wreq;
    logic hl_weights_1_8_wreq_filtered;
    logic [7:0] hl_weights_1_8_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_1_8_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_1_8_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_1_8_value_out)
    );
        
    // HL_WEIGHTS_2_0: Weights for neuron 2 of the hidden layer
    logic hl_weights_2_0_wreq;
    logic hl_weights_2_0_wreq_filtered;
    logic [7:0] hl_weights_2_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_2_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_2_0_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_2_0_value_out)
    );
        
    // HL_WEIGHTS_2_1: Weights for neuron 2 of the hidden layer
    logic hl_weights_2_1_wreq;
    logic hl_weights_2_1_wreq_filtered;
    logic [7:0] hl_weights_2_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_2_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_2_1_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_2_1_value_out)
    );
        
    // HL_WEIGHTS_2_2: Weights for neuron 2 of the hidden layer
    logic hl_weights_2_2_wreq;
    logic hl_weights_2_2_wreq_filtered;
    logic [7:0] hl_weights_2_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_2_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_2_2_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_2_2_value_out)
    );
        
    // HL_WEIGHTS_2_3: Weights for neuron 2 of the hidden layer
    logic hl_weights_2_3_wreq;
    logic hl_weights_2_3_wreq_filtered;
    logic [7:0] hl_weights_2_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_2_3_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_2_3_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_2_3_value_out)
    );
        
    // HL_WEIGHTS_2_4: Weights for neuron 2 of the hidden layer
    logic hl_weights_2_4_wreq;
    logic hl_weights_2_4_wreq_filtered;
    logic [7:0] hl_weights_2_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_2_4_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_2_4_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_2_4_value_out)
    );
        
    // HL_WEIGHTS_2_5: Weights for neuron 2 of the hidden layer
    logic hl_weights_2_5_wreq;
    logic hl_weights_2_5_wreq_filtered;
    logic [7:0] hl_weights_2_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_2_5_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_2_5_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_2_5_value_out)
    );
        
    // HL_WEIGHTS_2_6: Weights for neuron 2 of the hidden layer
    logic hl_weights_2_6_wreq;
    logic hl_weights_2_6_wreq_filtered;
    logic [7:0] hl_weights_2_6_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_2_6_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_2_6_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_2_6_value_out)
    );
        
    // HL_WEIGHTS_2_7: Weights for neuron 2 of the hidden layer
    logic hl_weights_2_7_wreq;
    logic hl_weights_2_7_wreq_filtered;
    logic [7:0] hl_weights_2_7_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_2_7_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_2_7_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_2_7_value_out)
    );
        
    // HL_WEIGHTS_2_8: Weights for neuron 2 of the hidden layer
    logic hl_weights_2_8_wreq;
    logic hl_weights_2_8_wreq_filtered;
    logic [7:0] hl_weights_2_8_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_2_8_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_2_8_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_2_8_value_out)
    );
        
    // HL_WEIGHTS_3_0: Weights for neuron 3 of the hidden layer
    logic hl_weights_3_0_wreq;
    logic hl_weights_3_0_wreq_filtered;
    logic [7:0] hl_weights_3_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_3_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_3_0_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_3_0_value_out)
    );
        
    // HL_WEIGHTS_3_1: Weights for neuron 3 of the hidden layer
    logic hl_weights_3_1_wreq;
    logic hl_weights_3_1_wreq_filtered;
    logic [7:0] hl_weights_3_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_3_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_3_1_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_3_1_value_out)
    );
        
    // HL_WEIGHTS_3_2: Weights for neuron 3 of the hidden layer
    logic hl_weights_3_2_wreq;
    logic hl_weights_3_2_wreq_filtered;
    logic [7:0] hl_weights_3_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_3_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_3_2_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_3_2_value_out)
    );
        
    // HL_WEIGHTS_3_3: Weights for neuron 3 of the hidden layer
    logic hl_weights_3_3_wreq;
    logic hl_weights_3_3_wreq_filtered;
    logic [7:0] hl_weights_3_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_3_3_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_3_3_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_3_3_value_out)
    );
        
    // HL_WEIGHTS_3_4: Weights for neuron 3 of the hidden layer
    logic hl_weights_3_4_wreq;
    logic hl_weights_3_4_wreq_filtered;
    logic [7:0] hl_weights_3_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_3_4_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_3_4_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_3_4_value_out)
    );
        
    // HL_WEIGHTS_3_5: Weights for neuron 3 of the hidden layer
    logic hl_weights_3_5_wreq;
    logic hl_weights_3_5_wreq_filtered;
    logic [7:0] hl_weights_3_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_3_5_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_3_5_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_3_5_value_out)
    );
        
    // HL_WEIGHTS_3_6: Weights for neuron 3 of the hidden layer
    logic hl_weights_3_6_wreq;
    logic hl_weights_3_6_wreq_filtered;
    logic [7:0] hl_weights_3_6_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_3_6_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_3_6_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_3_6_value_out)
    );
        
    // HL_WEIGHTS_3_7: Weights for neuron 3 of the hidden layer
    logic hl_weights_3_7_wreq;
    logic hl_weights_3_7_wreq_filtered;
    logic [7:0] hl_weights_3_7_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_3_7_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_3_7_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_3_7_value_out)
    );
        
    // HL_WEIGHTS_3_8: Weights for neuron 3 of the hidden layer
    logic hl_weights_3_8_wreq;
    logic hl_weights_3_8_wreq_filtered;
    logic [7:0] hl_weights_3_8_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_3_8_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_3_8_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_3_8_value_out)
    );
        
    // HL_WEIGHTS_4_0: Weights for neuron 4 of the hidden layer
    logic hl_weights_4_0_wreq;
    logic hl_weights_4_0_wreq_filtered;
    logic [7:0] hl_weights_4_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_4_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_4_0_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_4_0_value_out)
    );
        
    // HL_WEIGHTS_4_1: Weights for neuron 4 of the hidden layer
    logic hl_weights_4_1_wreq;
    logic hl_weights_4_1_wreq_filtered;
    logic [7:0] hl_weights_4_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_4_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_4_1_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_4_1_value_out)
    );
        
    // HL_WEIGHTS_4_2: Weights for neuron 4 of the hidden layer
    logic hl_weights_4_2_wreq;
    logic hl_weights_4_2_wreq_filtered;
    logic [7:0] hl_weights_4_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_4_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_4_2_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_4_2_value_out)
    );
        
    // HL_WEIGHTS_4_3: Weights for neuron 4 of the hidden layer
    logic hl_weights_4_3_wreq;
    logic hl_weights_4_3_wreq_filtered;
    logic [7:0] hl_weights_4_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_4_3_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_4_3_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_4_3_value_out)
    );
        
    // HL_WEIGHTS_4_4: Weights for neuron 4 of the hidden layer
    logic hl_weights_4_4_wreq;
    logic hl_weights_4_4_wreq_filtered;
    logic [7:0] hl_weights_4_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_4_4_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_4_4_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_4_4_value_out)
    );
        
    // HL_WEIGHTS_4_5: Weights for neuron 4 of the hidden layer
    logic hl_weights_4_5_wreq;
    logic hl_weights_4_5_wreq_filtered;
    logic [7:0] hl_weights_4_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_4_5_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_4_5_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_4_5_value_out)
    );
        
    // HL_WEIGHTS_4_6: Weights for neuron 4 of the hidden layer
    logic hl_weights_4_6_wreq;
    logic hl_weights_4_6_wreq_filtered;
    logic [7:0] hl_weights_4_6_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_4_6_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_4_6_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_4_6_value_out)
    );
        
    // HL_WEIGHTS_4_7: Weights for neuron 4 of the hidden layer
    logic hl_weights_4_7_wreq;
    logic hl_weights_4_7_wreq_filtered;
    logic [7:0] hl_weights_4_7_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_4_7_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_4_7_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_4_7_value_out)
    );
        
    // HL_WEIGHTS_4_8: Weights for neuron 4 of the hidden layer
    logic hl_weights_4_8_wreq;
    logic hl_weights_4_8_wreq_filtered;
    logic [7:0] hl_weights_4_8_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_4_8_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_4_8_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_4_8_value_out)
    );
        
    // HL_WEIGHTS_5_0: Weights for neuron 5 of the hidden layer
    logic hl_weights_5_0_wreq;
    logic hl_weights_5_0_wreq_filtered;
    logic [7:0] hl_weights_5_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_5_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_5_0_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_5_0_value_out)
    );
        
    // HL_WEIGHTS_5_1: Weights for neuron 5 of the hidden layer
    logic hl_weights_5_1_wreq;
    logic hl_weights_5_1_wreq_filtered;
    logic [7:0] hl_weights_5_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_5_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_5_1_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_5_1_value_out)
    );
        
    // HL_WEIGHTS_5_2: Weights for neuron 5 of the hidden layer
    logic hl_weights_5_2_wreq;
    logic hl_weights_5_2_wreq_filtered;
    logic [7:0] hl_weights_5_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_5_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_5_2_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_5_2_value_out)
    );
        
    // HL_WEIGHTS_5_3: Weights for neuron 5 of the hidden layer
    logic hl_weights_5_3_wreq;
    logic hl_weights_5_3_wreq_filtered;
    logic [7:0] hl_weights_5_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_5_3_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_5_3_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_5_3_value_out)
    );
        
    // HL_WEIGHTS_5_4: Weights for neuron 5 of the hidden layer
    logic hl_weights_5_4_wreq;
    logic hl_weights_5_4_wreq_filtered;
    logic [7:0] hl_weights_5_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_5_4_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_5_4_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_5_4_value_out)
    );
        
    // HL_WEIGHTS_5_5: Weights for neuron 5 of the hidden layer
    logic hl_weights_5_5_wreq;
    logic hl_weights_5_5_wreq_filtered;
    logic [7:0] hl_weights_5_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_5_5_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_5_5_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_5_5_value_out)
    );
        
    // HL_WEIGHTS_5_6: Weights for neuron 5 of the hidden layer
    logic hl_weights_5_6_wreq;
    logic hl_weights_5_6_wreq_filtered;
    logic [7:0] hl_weights_5_6_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_5_6_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_5_6_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_5_6_value_out)
    );
        
    // HL_WEIGHTS_5_7: Weights for neuron 5 of the hidden layer
    logic hl_weights_5_7_wreq;
    logic hl_weights_5_7_wreq_filtered;
    logic [7:0] hl_weights_5_7_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_5_7_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_5_7_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_5_7_value_out)
    );
        
    // HL_WEIGHTS_5_8: Weights for neuron 5 of the hidden layer
    logic hl_weights_5_8_wreq;
    logic hl_weights_5_8_wreq_filtered;
    logic [7:0] hl_weights_5_8_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_WEIGHTS_5_8_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_weights_5_8_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_weights_5_8_value_out)
    );
        
    // HL_BIAS_0: Bias for neuron 0 of the hidden layer
    logic hl_bias_0_wreq;
    logic hl_bias_0_wreq_filtered;
    logic [7:0] hl_bias_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_BIAS_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_bias_0_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_bias_0_value_out)
    );
        
    // HL_BIAS_1: Bias for neuron 1 of the hidden layer
    logic hl_bias_1_wreq;
    logic hl_bias_1_wreq_filtered;
    logic [7:0] hl_bias_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_BIAS_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_bias_1_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_bias_1_value_out)
    );
        
    // HL_BIAS_2: Bias for neuron 2 of the hidden layer
    logic hl_bias_2_wreq;
    logic hl_bias_2_wreq_filtered;
    logic [7:0] hl_bias_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_BIAS_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_bias_2_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_bias_2_value_out)
    );
        
    // HL_BIAS_3: Bias for neuron 3 of the hidden layer
    logic hl_bias_3_wreq;
    logic hl_bias_3_wreq_filtered;
    logic [7:0] hl_bias_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_BIAS_3_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_bias_3_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_bias_3_value_out)
    );
        
    // HL_BIAS_4: Bias for neuron 4 of the hidden layer
    logic hl_bias_4_wreq;
    logic hl_bias_4_wreq_filtered;
    logic [7:0] hl_bias_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_BIAS_4_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_bias_4_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_bias_4_value_out)
    );
        
    // HL_BIAS_5: Bias for neuron 5 of the hidden layer
    logic hl_bias_5_wreq;
    logic hl_bias_5_wreq_filtered;
    logic [7:0] hl_bias_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    HL_BIAS_5_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (hl_bias_5_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (hl_bias_5_value_out)
    );
        
    // OL_WEIGHTS_0_0: Weights for neuron 0 of the output layer
    logic ol_weights_0_0_wreq;
    logic ol_weights_0_0_wreq_filtered;
    logic [7:0] ol_weights_0_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_0_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_0_0_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_0_0_value_out)
    );
        
    // OL_WEIGHTS_0_1: Weights for neuron 0 of the output layer
    logic ol_weights_0_1_wreq;
    logic ol_weights_0_1_wreq_filtered;
    logic [7:0] ol_weights_0_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_0_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_0_1_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_0_1_value_out)
    );
        
    // OL_WEIGHTS_0_2: Weights for neuron 0 of the output layer
    logic ol_weights_0_2_wreq;
    logic ol_weights_0_2_wreq_filtered;
    logic [7:0] ol_weights_0_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_0_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_0_2_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_0_2_value_out)
    );
        
    // OL_WEIGHTS_0_3: Weights for neuron 0 of the output layer
    logic ol_weights_0_3_wreq;
    logic ol_weights_0_3_wreq_filtered;
    logic [7:0] ol_weights_0_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_0_3_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_0_3_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_0_3_value_out)
    );
        
    // OL_WEIGHTS_0_4: Weights for neuron 0 of the output layer
    logic ol_weights_0_4_wreq;
    logic ol_weights_0_4_wreq_filtered;
    logic [7:0] ol_weights_0_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_0_4_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_0_4_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_0_4_value_out)
    );
        
    // OL_WEIGHTS_0_5: Weights for neuron 0 of the output layer
    logic ol_weights_0_5_wreq;
    logic ol_weights_0_5_wreq_filtered;
    logic [7:0] ol_weights_0_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_0_5_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_0_5_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_0_5_value_out)
    );
        
    // OL_WEIGHTS_1_0: Weights for neuron 1 of the output layer
    logic ol_weights_1_0_wreq;
    logic ol_weights_1_0_wreq_filtered;
    logic [7:0] ol_weights_1_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_1_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_1_0_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_1_0_value_out)
    );
        
    // OL_WEIGHTS_1_1: Weights for neuron 1 of the output layer
    logic ol_weights_1_1_wreq;
    logic ol_weights_1_1_wreq_filtered;
    logic [7:0] ol_weights_1_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_1_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_1_1_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_1_1_value_out)
    );
        
    // OL_WEIGHTS_1_2: Weights for neuron 1 of the output layer
    logic ol_weights_1_2_wreq;
    logic ol_weights_1_2_wreq_filtered;
    logic [7:0] ol_weights_1_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_1_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_1_2_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_1_2_value_out)
    );
        
    // OL_WEIGHTS_1_3: Weights for neuron 1 of the output layer
    logic ol_weights_1_3_wreq;
    logic ol_weights_1_3_wreq_filtered;
    logic [7:0] ol_weights_1_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_1_3_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_1_3_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_1_3_value_out)
    );
        
    // OL_WEIGHTS_1_4: Weights for neuron 1 of the output layer
    logic ol_weights_1_4_wreq;
    logic ol_weights_1_4_wreq_filtered;
    logic [7:0] ol_weights_1_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_1_4_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_1_4_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_1_4_value_out)
    );
        
    // OL_WEIGHTS_1_5: Weights for neuron 1 of the output layer
    logic ol_weights_1_5_wreq;
    logic ol_weights_1_5_wreq_filtered;
    logic [7:0] ol_weights_1_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_1_5_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_1_5_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_1_5_value_out)
    );
        
    // OL_WEIGHTS_2_0: Weights for neuron 2 of the output layer
    logic ol_weights_2_0_wreq;
    logic ol_weights_2_0_wreq_filtered;
    logic [7:0] ol_weights_2_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_2_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_2_0_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_2_0_value_out)
    );
        
    // OL_WEIGHTS_2_1: Weights for neuron 2 of the output layer
    logic ol_weights_2_1_wreq;
    logic ol_weights_2_1_wreq_filtered;
    logic [7:0] ol_weights_2_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_2_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_2_1_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_2_1_value_out)
    );
        
    // OL_WEIGHTS_2_2: Weights for neuron 2 of the output layer
    logic ol_weights_2_2_wreq;
    logic ol_weights_2_2_wreq_filtered;
    logic [7:0] ol_weights_2_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_2_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_2_2_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_2_2_value_out)
    );
        
    // OL_WEIGHTS_2_3: Weights for neuron 2 of the output layer
    logic ol_weights_2_3_wreq;
    logic ol_weights_2_3_wreq_filtered;
    logic [7:0] ol_weights_2_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_2_3_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_2_3_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_2_3_value_out)
    );
        
    // OL_WEIGHTS_2_4: Weights for neuron 2 of the output layer
    logic ol_weights_2_4_wreq;
    logic ol_weights_2_4_wreq_filtered;
    logic [7:0] ol_weights_2_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_2_4_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_2_4_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_2_4_value_out)
    );
        
    // OL_WEIGHTS_2_5: Weights for neuron 2 of the output layer
    logic ol_weights_2_5_wreq;
    logic ol_weights_2_5_wreq_filtered;
    logic [7:0] ol_weights_2_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_WEIGHTS_2_5_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_weights_2_5_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_weights_2_5_value_out)
    );
        
    // OL_BIAS_0: Bias for neuron 0 of the output layer
    logic ol_bias_0_wreq;
    logic ol_bias_0_wreq_filtered;
    logic [7:0] ol_bias_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_BIAS_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_bias_0_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_bias_0_value_out)
    );
        
    // OL_BIAS_1: Bias for neuron 1 of the output layer
    logic ol_bias_1_wreq;
    logic ol_bias_1_wreq_filtered;
    logic [7:0] ol_bias_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_BIAS_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_bias_1_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_bias_1_value_out)
    );
        
    // OL_BIAS_2: Bias for neuron 2 of the output layer
    logic ol_bias_2_wreq;
    logic ol_bias_2_wreq_filtered;
    logic [7:0] ol_bias_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OL_BIAS_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (ol_bias_2_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (ol_bias_2_value_out)
    );
        
    // INPUT_GRID_0: Pixel 0 of the input character
    logic input_grid_0_wreq;
    logic input_grid_0_wreq_filtered;
    logic [7:0] input_grid_0_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    INPUT_GRID_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (input_grid_0_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (input_grid_0_value_out)
    );
        
    // INPUT_GRID_1: Pixel 1 of the input character
    logic input_grid_1_wreq;
    logic input_grid_1_wreq_filtered;
    logic [7:0] input_grid_1_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    INPUT_GRID_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (input_grid_1_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (input_grid_1_value_out)
    );
        
    // INPUT_GRID_2: Pixel 2 of the input character
    logic input_grid_2_wreq;
    logic input_grid_2_wreq_filtered;
    logic [7:0] input_grid_2_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    INPUT_GRID_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (input_grid_2_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (input_grid_2_value_out)
    );
        
    // INPUT_GRID_3: Pixel 3 of the input character
    logic input_grid_3_wreq;
    logic input_grid_3_wreq_filtered;
    logic [7:0] input_grid_3_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    INPUT_GRID_3_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (input_grid_3_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (input_grid_3_value_out)
    );
        
    // INPUT_GRID_4: Pixel 4 of the input character
    logic input_grid_4_wreq;
    logic input_grid_4_wreq_filtered;
    logic [7:0] input_grid_4_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    INPUT_GRID_4_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (input_grid_4_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (input_grid_4_value_out)
    );
        
    // INPUT_GRID_5: Pixel 5 of the input character
    logic input_grid_5_wreq;
    logic input_grid_5_wreq_filtered;
    logic [7:0] input_grid_5_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    INPUT_GRID_5_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (input_grid_5_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (input_grid_5_value_out)
    );
        
    // INPUT_GRID_6: Pixel 6 of the input character
    logic input_grid_6_wreq;
    logic input_grid_6_wreq_filtered;
    logic [7:0] input_grid_6_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    INPUT_GRID_6_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (input_grid_6_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (input_grid_6_value_out)
    );
        
    // INPUT_GRID_7: Pixel 7 of the input character
    logic input_grid_7_wreq;
    logic input_grid_7_wreq_filtered;
    logic [7:0] input_grid_7_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    INPUT_GRID_7_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (input_grid_7_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (input_grid_7_value_out)
    );
        
    // INPUT_GRID_8: Pixel 8 of the input character
    logic input_grid_8_wreq;
    logic input_grid_8_wreq_filtered;
    logic [7:0] input_grid_8_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    INPUT_GRID_8_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (input_grid_8_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (input_grid_8_value_out)
    );
        
    // OUTPUT_SOLUTION_0: Digit 0 of the output solution
    logic [7:0] output_solution_0_value_in;
    logic [7:0] output_solution_0_value_out;
    RO_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OUTPUT_SOLUTION_0_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .VALUE_IN   (output_solution_0_value_in),
        .VALUE_OUT  (output_solution_0_value_out)
    );
        
    // OUTPUT_SOLUTION_1: Digit 1 of the output solution
    logic [7:0] output_solution_1_value_in;
    logic [7:0] output_solution_1_value_out;
    RO_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OUTPUT_SOLUTION_1_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .VALUE_IN   (output_solution_1_value_in),
        .VALUE_OUT  (output_solution_1_value_out)
    );
        
    // OUTPUT_SOLUTION_2: Digit 2 of the output solution
    logic [7:0] output_solution_2_value_in;
    logic [7:0] output_solution_2_value_out;
    RO_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    OUTPUT_SOLUTION_2_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .VALUE_IN   (output_solution_2_value_in),
        .VALUE_OUT  (output_solution_2_value_out)
    );
        
    // CORE_CTRL: Core control register
    logic core_ctrl_wreq;
    logic core_ctrl_wreq_filtered;
    logic [7:0] core_ctrl_value_out;
    RW_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    CORE_CTRL_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .WEN        (core_ctrl_wreq_filtered),
        .VALUE_IN   (regpool_wdata),
        .VALUE_OUT  (core_ctrl_value_out)
    );
        
    // CORE_STATUS: Core status register
    logic [7:0] core_status_value_in;
    logic [7:0] core_status_value_out;
    RO_REG #(
        .DATA_WIDTH (8),
        .HAS_RESET  (1)
    )
    CORE_STATUS_REG (
        .CLK        (ACLK),
        .RSTN       (ARESETN),
        .VALUE_IN   (core_status_value_in),
        .VALUE_OUT  (core_status_value_out)
    );
        
    // Write decoder
    always_ff @(posedge ACLK) begin
        hl_weights_0_0_wreq <= 1'b0;
        hl_weights_0_1_wreq <= 1'b0;
        hl_weights_0_2_wreq <= 1'b0;
        hl_weights_0_3_wreq <= 1'b0;
        hl_weights_0_4_wreq <= 1'b0;
        hl_weights_0_5_wreq <= 1'b0;
        hl_weights_0_6_wreq <= 1'b0;
        hl_weights_0_7_wreq <= 1'b0;
        hl_weights_0_8_wreq <= 1'b0;
        hl_weights_1_0_wreq <= 1'b0;
        hl_weights_1_1_wreq <= 1'b0;
        hl_weights_1_2_wreq <= 1'b0;
        hl_weights_1_3_wreq <= 1'b0;
        hl_weights_1_4_wreq <= 1'b0;
        hl_weights_1_5_wreq <= 1'b0;
        hl_weights_1_6_wreq <= 1'b0;
        hl_weights_1_7_wreq <= 1'b0;
        hl_weights_1_8_wreq <= 1'b0;
        hl_weights_2_0_wreq <= 1'b0;
        hl_weights_2_1_wreq <= 1'b0;
        hl_weights_2_2_wreq <= 1'b0;
        hl_weights_2_3_wreq <= 1'b0;
        hl_weights_2_4_wreq <= 1'b0;
        hl_weights_2_5_wreq <= 1'b0;
        hl_weights_2_6_wreq <= 1'b0;
        hl_weights_2_7_wreq <= 1'b0;
        hl_weights_2_8_wreq <= 1'b0;
        hl_weights_3_0_wreq <= 1'b0;
        hl_weights_3_1_wreq <= 1'b0;
        hl_weights_3_2_wreq <= 1'b0;
        hl_weights_3_3_wreq <= 1'b0;
        hl_weights_3_4_wreq <= 1'b0;
        hl_weights_3_5_wreq <= 1'b0;
        hl_weights_3_6_wreq <= 1'b0;
        hl_weights_3_7_wreq <= 1'b0;
        hl_weights_3_8_wreq <= 1'b0;
        hl_weights_4_0_wreq <= 1'b0;
        hl_weights_4_1_wreq <= 1'b0;
        hl_weights_4_2_wreq <= 1'b0;
        hl_weights_4_3_wreq <= 1'b0;
        hl_weights_4_4_wreq <= 1'b0;
        hl_weights_4_5_wreq <= 1'b0;
        hl_weights_4_6_wreq <= 1'b0;
        hl_weights_4_7_wreq <= 1'b0;
        hl_weights_4_8_wreq <= 1'b0;
        hl_weights_5_0_wreq <= 1'b0;
        hl_weights_5_1_wreq <= 1'b0;
        hl_weights_5_2_wreq <= 1'b0;
        hl_weights_5_3_wreq <= 1'b0;
        hl_weights_5_4_wreq <= 1'b0;
        hl_weights_5_5_wreq <= 1'b0;
        hl_weights_5_6_wreq <= 1'b0;
        hl_weights_5_7_wreq <= 1'b0;
        hl_weights_5_8_wreq <= 1'b0;
        hl_bias_0_wreq <= 1'b0;
        hl_bias_1_wreq <= 1'b0;
        hl_bias_2_wreq <= 1'b0;
        hl_bias_3_wreq <= 1'b0;
        hl_bias_4_wreq <= 1'b0;
        hl_bias_5_wreq <= 1'b0;
        ol_weights_0_0_wreq <= 1'b0;
        ol_weights_0_1_wreq <= 1'b0;
        ol_weights_0_2_wreq <= 1'b0;
        ol_weights_0_3_wreq <= 1'b0;
        ol_weights_0_4_wreq <= 1'b0;
        ol_weights_0_5_wreq <= 1'b0;
        ol_weights_1_0_wreq <= 1'b0;
        ol_weights_1_1_wreq <= 1'b0;
        ol_weights_1_2_wreq <= 1'b0;
        ol_weights_1_3_wreq <= 1'b0;
        ol_weights_1_4_wreq <= 1'b0;
        ol_weights_1_5_wreq <= 1'b0;
        ol_weights_2_0_wreq <= 1'b0;
        ol_weights_2_1_wreq <= 1'b0;
        ol_weights_2_2_wreq <= 1'b0;
        ol_weights_2_3_wreq <= 1'b0;
        ol_weights_2_4_wreq <= 1'b0;
        ol_weights_2_5_wreq <= 1'b0;
        ol_bias_0_wreq <= 1'b0;
        ol_bias_1_wreq <= 1'b0;
        ol_bias_2_wreq <= 1'b0;
        input_grid_0_wreq <= 1'b0;
        input_grid_1_wreq <= 1'b0;
        input_grid_2_wreq <= 1'b0;
        input_grid_3_wreq <= 1'b0;
        input_grid_4_wreq <= 1'b0;
        input_grid_5_wreq <= 1'b0;
        input_grid_6_wreq <= 1'b0;
        input_grid_7_wreq <= 1'b0;
        input_grid_8_wreq <= 1'b0;
        core_ctrl_wreq <= 1'b0;

        case(regpool_waddr)
            `HL_WEIGHTS_0_0_OFFSET : begin hl_weights_0_0_wreq <= 1'b1; end
            `HL_WEIGHTS_0_1_OFFSET : begin hl_weights_0_1_wreq <= 1'b1; end
            `HL_WEIGHTS_0_2_OFFSET : begin hl_weights_0_2_wreq <= 1'b1; end
            `HL_WEIGHTS_0_3_OFFSET : begin hl_weights_0_3_wreq <= 1'b1; end
            `HL_WEIGHTS_0_4_OFFSET : begin hl_weights_0_4_wreq <= 1'b1; end
            `HL_WEIGHTS_0_5_OFFSET : begin hl_weights_0_5_wreq <= 1'b1; end
            `HL_WEIGHTS_0_6_OFFSET : begin hl_weights_0_6_wreq <= 1'b1; end
            `HL_WEIGHTS_0_7_OFFSET : begin hl_weights_0_7_wreq <= 1'b1; end
            `HL_WEIGHTS_0_8_OFFSET : begin hl_weights_0_8_wreq <= 1'b1; end
            `HL_WEIGHTS_1_0_OFFSET : begin hl_weights_1_0_wreq <= 1'b1; end
            `HL_WEIGHTS_1_1_OFFSET : begin hl_weights_1_1_wreq <= 1'b1; end
            `HL_WEIGHTS_1_2_OFFSET : begin hl_weights_1_2_wreq <= 1'b1; end
            `HL_WEIGHTS_1_3_OFFSET : begin hl_weights_1_3_wreq <= 1'b1; end
            `HL_WEIGHTS_1_4_OFFSET : begin hl_weights_1_4_wreq <= 1'b1; end
            `HL_WEIGHTS_1_5_OFFSET : begin hl_weights_1_5_wreq <= 1'b1; end
            `HL_WEIGHTS_1_6_OFFSET : begin hl_weights_1_6_wreq <= 1'b1; end
            `HL_WEIGHTS_1_7_OFFSET : begin hl_weights_1_7_wreq <= 1'b1; end
            `HL_WEIGHTS_1_8_OFFSET : begin hl_weights_1_8_wreq <= 1'b1; end
            `HL_WEIGHTS_2_0_OFFSET : begin hl_weights_2_0_wreq <= 1'b1; end
            `HL_WEIGHTS_2_1_OFFSET : begin hl_weights_2_1_wreq <= 1'b1; end
            `HL_WEIGHTS_2_2_OFFSET : begin hl_weights_2_2_wreq <= 1'b1; end
            `HL_WEIGHTS_2_3_OFFSET : begin hl_weights_2_3_wreq <= 1'b1; end
            `HL_WEIGHTS_2_4_OFFSET : begin hl_weights_2_4_wreq <= 1'b1; end
            `HL_WEIGHTS_2_5_OFFSET : begin hl_weights_2_5_wreq <= 1'b1; end
            `HL_WEIGHTS_2_6_OFFSET : begin hl_weights_2_6_wreq <= 1'b1; end
            `HL_WEIGHTS_2_7_OFFSET : begin hl_weights_2_7_wreq <= 1'b1; end
            `HL_WEIGHTS_2_8_OFFSET : begin hl_weights_2_8_wreq <= 1'b1; end
            `HL_WEIGHTS_3_0_OFFSET : begin hl_weights_3_0_wreq <= 1'b1; end
            `HL_WEIGHTS_3_1_OFFSET : begin hl_weights_3_1_wreq <= 1'b1; end
            `HL_WEIGHTS_3_2_OFFSET : begin hl_weights_3_2_wreq <= 1'b1; end
            `HL_WEIGHTS_3_3_OFFSET : begin hl_weights_3_3_wreq <= 1'b1; end
            `HL_WEIGHTS_3_4_OFFSET : begin hl_weights_3_4_wreq <= 1'b1; end
            `HL_WEIGHTS_3_5_OFFSET : begin hl_weights_3_5_wreq <= 1'b1; end
            `HL_WEIGHTS_3_6_OFFSET : begin hl_weights_3_6_wreq <= 1'b1; end
            `HL_WEIGHTS_3_7_OFFSET : begin hl_weights_3_7_wreq <= 1'b1; end
            `HL_WEIGHTS_3_8_OFFSET : begin hl_weights_3_8_wreq <= 1'b1; end
            `HL_WEIGHTS_4_0_OFFSET : begin hl_weights_4_0_wreq <= 1'b1; end
            `HL_WEIGHTS_4_1_OFFSET : begin hl_weights_4_1_wreq <= 1'b1; end
            `HL_WEIGHTS_4_2_OFFSET : begin hl_weights_4_2_wreq <= 1'b1; end
            `HL_WEIGHTS_4_3_OFFSET : begin hl_weights_4_3_wreq <= 1'b1; end
            `HL_WEIGHTS_4_4_OFFSET : begin hl_weights_4_4_wreq <= 1'b1; end
            `HL_WEIGHTS_4_5_OFFSET : begin hl_weights_4_5_wreq <= 1'b1; end
            `HL_WEIGHTS_4_6_OFFSET : begin hl_weights_4_6_wreq <= 1'b1; end
            `HL_WEIGHTS_4_7_OFFSET : begin hl_weights_4_7_wreq <= 1'b1; end
            `HL_WEIGHTS_4_8_OFFSET : begin hl_weights_4_8_wreq <= 1'b1; end
            `HL_WEIGHTS_5_0_OFFSET : begin hl_weights_5_0_wreq <= 1'b1; end
            `HL_WEIGHTS_5_1_OFFSET : begin hl_weights_5_1_wreq <= 1'b1; end
            `HL_WEIGHTS_5_2_OFFSET : begin hl_weights_5_2_wreq <= 1'b1; end
            `HL_WEIGHTS_5_3_OFFSET : begin hl_weights_5_3_wreq <= 1'b1; end
            `HL_WEIGHTS_5_4_OFFSET : begin hl_weights_5_4_wreq <= 1'b1; end
            `HL_WEIGHTS_5_5_OFFSET : begin hl_weights_5_5_wreq <= 1'b1; end
            `HL_WEIGHTS_5_6_OFFSET : begin hl_weights_5_6_wreq <= 1'b1; end
            `HL_WEIGHTS_5_7_OFFSET : begin hl_weights_5_7_wreq <= 1'b1; end
            `HL_WEIGHTS_5_8_OFFSET : begin hl_weights_5_8_wreq <= 1'b1; end
            `HL_BIAS_0_OFFSET : begin hl_bias_0_wreq <= 1'b1; end
            `HL_BIAS_1_OFFSET : begin hl_bias_1_wreq <= 1'b1; end
            `HL_BIAS_2_OFFSET : begin hl_bias_2_wreq <= 1'b1; end
            `HL_BIAS_3_OFFSET : begin hl_bias_3_wreq <= 1'b1; end
            `HL_BIAS_4_OFFSET : begin hl_bias_4_wreq <= 1'b1; end
            `HL_BIAS_5_OFFSET : begin hl_bias_5_wreq <= 1'b1; end
            `OL_WEIGHTS_0_0_OFFSET : begin ol_weights_0_0_wreq <= 1'b1; end
            `OL_WEIGHTS_0_1_OFFSET : begin ol_weights_0_1_wreq <= 1'b1; end
            `OL_WEIGHTS_0_2_OFFSET : begin ol_weights_0_2_wreq <= 1'b1; end
            `OL_WEIGHTS_0_3_OFFSET : begin ol_weights_0_3_wreq <= 1'b1; end
            `OL_WEIGHTS_0_4_OFFSET : begin ol_weights_0_4_wreq <= 1'b1; end
            `OL_WEIGHTS_0_5_OFFSET : begin ol_weights_0_5_wreq <= 1'b1; end
            `OL_WEIGHTS_1_0_OFFSET : begin ol_weights_1_0_wreq <= 1'b1; end
            `OL_WEIGHTS_1_1_OFFSET : begin ol_weights_1_1_wreq <= 1'b1; end
            `OL_WEIGHTS_1_2_OFFSET : begin ol_weights_1_2_wreq <= 1'b1; end
            `OL_WEIGHTS_1_3_OFFSET : begin ol_weights_1_3_wreq <= 1'b1; end
            `OL_WEIGHTS_1_4_OFFSET : begin ol_weights_1_4_wreq <= 1'b1; end
            `OL_WEIGHTS_1_5_OFFSET : begin ol_weights_1_5_wreq <= 1'b1; end
            `OL_WEIGHTS_2_0_OFFSET : begin ol_weights_2_0_wreq <= 1'b1; end
            `OL_WEIGHTS_2_1_OFFSET : begin ol_weights_2_1_wreq <= 1'b1; end
            `OL_WEIGHTS_2_2_OFFSET : begin ol_weights_2_2_wreq <= 1'b1; end
            `OL_WEIGHTS_2_3_OFFSET : begin ol_weights_2_3_wreq <= 1'b1; end
            `OL_WEIGHTS_2_4_OFFSET : begin ol_weights_2_4_wreq <= 1'b1; end
            `OL_WEIGHTS_2_5_OFFSET : begin ol_weights_2_5_wreq <= 1'b1; end
            `OL_BIAS_0_OFFSET : begin ol_bias_0_wreq <= 1'b1; end
            `OL_BIAS_1_OFFSET : begin ol_bias_1_wreq <= 1'b1; end
            `OL_BIAS_2_OFFSET : begin ol_bias_2_wreq <= 1'b1; end
            `INPUT_GRID_0_OFFSET : begin input_grid_0_wreq <= 1'b1; end
            `INPUT_GRID_1_OFFSET : begin input_grid_1_wreq <= 1'b1; end
            `INPUT_GRID_2_OFFSET : begin input_grid_2_wreq <= 1'b1; end
            `INPUT_GRID_3_OFFSET : begin input_grid_3_wreq <= 1'b1; end
            `INPUT_GRID_4_OFFSET : begin input_grid_4_wreq <= 1'b1; end
            `INPUT_GRID_5_OFFSET : begin input_grid_5_wreq <= 1'b1; end
            `INPUT_GRID_6_OFFSET : begin input_grid_6_wreq <= 1'b1; end
            `INPUT_GRID_7_OFFSET : begin input_grid_7_wreq <= 1'b1; end
            `INPUT_GRID_8_OFFSET : begin input_grid_8_wreq <= 1'b1; end
            `CORE_CTRL_OFFSET : begin core_ctrl_wreq <= 1'b1; end
        endcase
    end

    // Align Write enable to resampled decoder
    always_ff @(posedge ACLK) begin
        regpool_wen_resampled <= regpool_wen;
    end

    // Filter Write enables
    assign hl_weights_0_0_wreq_filtered = hl_weights_0_0_wreq & regpool_wen_resampled;
    assign hl_weights_0_1_wreq_filtered = hl_weights_0_1_wreq & regpool_wen_resampled;
    assign hl_weights_0_2_wreq_filtered = hl_weights_0_2_wreq & regpool_wen_resampled;
    assign hl_weights_0_3_wreq_filtered = hl_weights_0_3_wreq & regpool_wen_resampled;
    assign hl_weights_0_4_wreq_filtered = hl_weights_0_4_wreq & regpool_wen_resampled;
    assign hl_weights_0_5_wreq_filtered = hl_weights_0_5_wreq & regpool_wen_resampled;
    assign hl_weights_0_6_wreq_filtered = hl_weights_0_6_wreq & regpool_wen_resampled;
    assign hl_weights_0_7_wreq_filtered = hl_weights_0_7_wreq & regpool_wen_resampled;
    assign hl_weights_0_8_wreq_filtered = hl_weights_0_8_wreq & regpool_wen_resampled;
    assign hl_weights_1_0_wreq_filtered = hl_weights_1_0_wreq & regpool_wen_resampled;
    assign hl_weights_1_1_wreq_filtered = hl_weights_1_1_wreq & regpool_wen_resampled;
    assign hl_weights_1_2_wreq_filtered = hl_weights_1_2_wreq & regpool_wen_resampled;
    assign hl_weights_1_3_wreq_filtered = hl_weights_1_3_wreq & regpool_wen_resampled;
    assign hl_weights_1_4_wreq_filtered = hl_weights_1_4_wreq & regpool_wen_resampled;
    assign hl_weights_1_5_wreq_filtered = hl_weights_1_5_wreq & regpool_wen_resampled;
    assign hl_weights_1_6_wreq_filtered = hl_weights_1_6_wreq & regpool_wen_resampled;
    assign hl_weights_1_7_wreq_filtered = hl_weights_1_7_wreq & regpool_wen_resampled;
    assign hl_weights_1_8_wreq_filtered = hl_weights_1_8_wreq & regpool_wen_resampled;
    assign hl_weights_2_0_wreq_filtered = hl_weights_2_0_wreq & regpool_wen_resampled;
    assign hl_weights_2_1_wreq_filtered = hl_weights_2_1_wreq & regpool_wen_resampled;
    assign hl_weights_2_2_wreq_filtered = hl_weights_2_2_wreq & regpool_wen_resampled;
    assign hl_weights_2_3_wreq_filtered = hl_weights_2_3_wreq & regpool_wen_resampled;
    assign hl_weights_2_4_wreq_filtered = hl_weights_2_4_wreq & regpool_wen_resampled;
    assign hl_weights_2_5_wreq_filtered = hl_weights_2_5_wreq & regpool_wen_resampled;
    assign hl_weights_2_6_wreq_filtered = hl_weights_2_6_wreq & regpool_wen_resampled;
    assign hl_weights_2_7_wreq_filtered = hl_weights_2_7_wreq & regpool_wen_resampled;
    assign hl_weights_2_8_wreq_filtered = hl_weights_2_8_wreq & regpool_wen_resampled;
    assign hl_weights_3_0_wreq_filtered = hl_weights_3_0_wreq & regpool_wen_resampled;
    assign hl_weights_3_1_wreq_filtered = hl_weights_3_1_wreq & regpool_wen_resampled;
    assign hl_weights_3_2_wreq_filtered = hl_weights_3_2_wreq & regpool_wen_resampled;
    assign hl_weights_3_3_wreq_filtered = hl_weights_3_3_wreq & regpool_wen_resampled;
    assign hl_weights_3_4_wreq_filtered = hl_weights_3_4_wreq & regpool_wen_resampled;
    assign hl_weights_3_5_wreq_filtered = hl_weights_3_5_wreq & regpool_wen_resampled;
    assign hl_weights_3_6_wreq_filtered = hl_weights_3_6_wreq & regpool_wen_resampled;
    assign hl_weights_3_7_wreq_filtered = hl_weights_3_7_wreq & regpool_wen_resampled;
    assign hl_weights_3_8_wreq_filtered = hl_weights_3_8_wreq & regpool_wen_resampled;
    assign hl_weights_4_0_wreq_filtered = hl_weights_4_0_wreq & regpool_wen_resampled;
    assign hl_weights_4_1_wreq_filtered = hl_weights_4_1_wreq & regpool_wen_resampled;
    assign hl_weights_4_2_wreq_filtered = hl_weights_4_2_wreq & regpool_wen_resampled;
    assign hl_weights_4_3_wreq_filtered = hl_weights_4_3_wreq & regpool_wen_resampled;
    assign hl_weights_4_4_wreq_filtered = hl_weights_4_4_wreq & regpool_wen_resampled;
    assign hl_weights_4_5_wreq_filtered = hl_weights_4_5_wreq & regpool_wen_resampled;
    assign hl_weights_4_6_wreq_filtered = hl_weights_4_6_wreq & regpool_wen_resampled;
    assign hl_weights_4_7_wreq_filtered = hl_weights_4_7_wreq & regpool_wen_resampled;
    assign hl_weights_4_8_wreq_filtered = hl_weights_4_8_wreq & regpool_wen_resampled;
    assign hl_weights_5_0_wreq_filtered = hl_weights_5_0_wreq & regpool_wen_resampled;
    assign hl_weights_5_1_wreq_filtered = hl_weights_5_1_wreq & regpool_wen_resampled;
    assign hl_weights_5_2_wreq_filtered = hl_weights_5_2_wreq & regpool_wen_resampled;
    assign hl_weights_5_3_wreq_filtered = hl_weights_5_3_wreq & regpool_wen_resampled;
    assign hl_weights_5_4_wreq_filtered = hl_weights_5_4_wreq & regpool_wen_resampled;
    assign hl_weights_5_5_wreq_filtered = hl_weights_5_5_wreq & regpool_wen_resampled;
    assign hl_weights_5_6_wreq_filtered = hl_weights_5_6_wreq & regpool_wen_resampled;
    assign hl_weights_5_7_wreq_filtered = hl_weights_5_7_wreq & regpool_wen_resampled;
    assign hl_weights_5_8_wreq_filtered = hl_weights_5_8_wreq & regpool_wen_resampled;
    assign hl_bias_0_wreq_filtered = hl_bias_0_wreq & regpool_wen_resampled;
    assign hl_bias_1_wreq_filtered = hl_bias_1_wreq & regpool_wen_resampled;
    assign hl_bias_2_wreq_filtered = hl_bias_2_wreq & regpool_wen_resampled;
    assign hl_bias_3_wreq_filtered = hl_bias_3_wreq & regpool_wen_resampled;
    assign hl_bias_4_wreq_filtered = hl_bias_4_wreq & regpool_wen_resampled;
    assign hl_bias_5_wreq_filtered = hl_bias_5_wreq & regpool_wen_resampled;
    assign ol_weights_0_0_wreq_filtered = ol_weights_0_0_wreq & regpool_wen_resampled;
    assign ol_weights_0_1_wreq_filtered = ol_weights_0_1_wreq & regpool_wen_resampled;
    assign ol_weights_0_2_wreq_filtered = ol_weights_0_2_wreq & regpool_wen_resampled;
    assign ol_weights_0_3_wreq_filtered = ol_weights_0_3_wreq & regpool_wen_resampled;
    assign ol_weights_0_4_wreq_filtered = ol_weights_0_4_wreq & regpool_wen_resampled;
    assign ol_weights_0_5_wreq_filtered = ol_weights_0_5_wreq & regpool_wen_resampled;
    assign ol_weights_1_0_wreq_filtered = ol_weights_1_0_wreq & regpool_wen_resampled;
    assign ol_weights_1_1_wreq_filtered = ol_weights_1_1_wreq & regpool_wen_resampled;
    assign ol_weights_1_2_wreq_filtered = ol_weights_1_2_wreq & regpool_wen_resampled;
    assign ol_weights_1_3_wreq_filtered = ol_weights_1_3_wreq & regpool_wen_resampled;
    assign ol_weights_1_4_wreq_filtered = ol_weights_1_4_wreq & regpool_wen_resampled;
    assign ol_weights_1_5_wreq_filtered = ol_weights_1_5_wreq & regpool_wen_resampled;
    assign ol_weights_2_0_wreq_filtered = ol_weights_2_0_wreq & regpool_wen_resampled;
    assign ol_weights_2_1_wreq_filtered = ol_weights_2_1_wreq & regpool_wen_resampled;
    assign ol_weights_2_2_wreq_filtered = ol_weights_2_2_wreq & regpool_wen_resampled;
    assign ol_weights_2_3_wreq_filtered = ol_weights_2_3_wreq & regpool_wen_resampled;
    assign ol_weights_2_4_wreq_filtered = ol_weights_2_4_wreq & regpool_wen_resampled;
    assign ol_weights_2_5_wreq_filtered = ol_weights_2_5_wreq & regpool_wen_resampled;
    assign ol_bias_0_wreq_filtered = ol_bias_0_wreq & regpool_wen_resampled;
    assign ol_bias_1_wreq_filtered = ol_bias_1_wreq & regpool_wen_resampled;
    assign ol_bias_2_wreq_filtered = ol_bias_2_wreq & regpool_wen_resampled;
    assign input_grid_0_wreq_filtered = input_grid_0_wreq & regpool_wen_resampled;
    assign input_grid_1_wreq_filtered = input_grid_1_wreq & regpool_wen_resampled;
    assign input_grid_2_wreq_filtered = input_grid_2_wreq & regpool_wen_resampled;
    assign input_grid_3_wreq_filtered = input_grid_3_wreq & regpool_wen_resampled;
    assign input_grid_4_wreq_filtered = input_grid_4_wreq & regpool_wen_resampled;
    assign input_grid_5_wreq_filtered = input_grid_5_wreq & regpool_wen_resampled;
    assign input_grid_6_wreq_filtered = input_grid_6_wreq & regpool_wen_resampled;
    assign input_grid_7_wreq_filtered = input_grid_7_wreq & regpool_wen_resampled;
    assign input_grid_8_wreq_filtered = input_grid_8_wreq & regpool_wen_resampled;
    assign core_ctrl_wreq_filtered = core_ctrl_wreq & regpool_wen_resampled;

    // Create Read strobe from Read request edge
    always_ff @(posedge ACLK) begin
        regpool_rvalid <= regpool_ren;
    end

    // Read decoder
    always_ff @(posedge ACLK) begin
        case(regpool_raddr)
            `HL_WEIGHTS_0_0_OFFSET : begin regpool_rdata <= hl_weights_0_0_value_out; end
            `HL_WEIGHTS_0_1_OFFSET : begin regpool_rdata <= hl_weights_0_1_value_out; end
            `HL_WEIGHTS_0_2_OFFSET : begin regpool_rdata <= hl_weights_0_2_value_out; end
            `HL_WEIGHTS_0_3_OFFSET : begin regpool_rdata <= hl_weights_0_3_value_out; end
            `HL_WEIGHTS_0_4_OFFSET : begin regpool_rdata <= hl_weights_0_4_value_out; end
            `HL_WEIGHTS_0_5_OFFSET : begin regpool_rdata <= hl_weights_0_5_value_out; end
            `HL_WEIGHTS_0_6_OFFSET : begin regpool_rdata <= hl_weights_0_6_value_out; end
            `HL_WEIGHTS_0_7_OFFSET : begin regpool_rdata <= hl_weights_0_7_value_out; end
            `HL_WEIGHTS_0_8_OFFSET : begin regpool_rdata <= hl_weights_0_8_value_out; end
            `HL_WEIGHTS_1_0_OFFSET : begin regpool_rdata <= hl_weights_1_0_value_out; end
            `HL_WEIGHTS_1_1_OFFSET : begin regpool_rdata <= hl_weights_1_1_value_out; end
            `HL_WEIGHTS_1_2_OFFSET : begin regpool_rdata <= hl_weights_1_2_value_out; end
            `HL_WEIGHTS_1_3_OFFSET : begin regpool_rdata <= hl_weights_1_3_value_out; end
            `HL_WEIGHTS_1_4_OFFSET : begin regpool_rdata <= hl_weights_1_4_value_out; end
            `HL_WEIGHTS_1_5_OFFSET : begin regpool_rdata <= hl_weights_1_5_value_out; end
            `HL_WEIGHTS_1_6_OFFSET : begin regpool_rdata <= hl_weights_1_6_value_out; end
            `HL_WEIGHTS_1_7_OFFSET : begin regpool_rdata <= hl_weights_1_7_value_out; end
            `HL_WEIGHTS_1_8_OFFSET : begin regpool_rdata <= hl_weights_1_8_value_out; end
            `HL_WEIGHTS_2_0_OFFSET : begin regpool_rdata <= hl_weights_2_0_value_out; end
            `HL_WEIGHTS_2_1_OFFSET : begin regpool_rdata <= hl_weights_2_1_value_out; end
            `HL_WEIGHTS_2_2_OFFSET : begin regpool_rdata <= hl_weights_2_2_value_out; end
            `HL_WEIGHTS_2_3_OFFSET : begin regpool_rdata <= hl_weights_2_3_value_out; end
            `HL_WEIGHTS_2_4_OFFSET : begin regpool_rdata <= hl_weights_2_4_value_out; end
            `HL_WEIGHTS_2_5_OFFSET : begin regpool_rdata <= hl_weights_2_5_value_out; end
            `HL_WEIGHTS_2_6_OFFSET : begin regpool_rdata <= hl_weights_2_6_value_out; end
            `HL_WEIGHTS_2_7_OFFSET : begin regpool_rdata <= hl_weights_2_7_value_out; end
            `HL_WEIGHTS_2_8_OFFSET : begin regpool_rdata <= hl_weights_2_8_value_out; end
            `HL_WEIGHTS_3_0_OFFSET : begin regpool_rdata <= hl_weights_3_0_value_out; end
            `HL_WEIGHTS_3_1_OFFSET : begin regpool_rdata <= hl_weights_3_1_value_out; end
            `HL_WEIGHTS_3_2_OFFSET : begin regpool_rdata <= hl_weights_3_2_value_out; end
            `HL_WEIGHTS_3_3_OFFSET : begin regpool_rdata <= hl_weights_3_3_value_out; end
            `HL_WEIGHTS_3_4_OFFSET : begin regpool_rdata <= hl_weights_3_4_value_out; end
            `HL_WEIGHTS_3_5_OFFSET : begin regpool_rdata <= hl_weights_3_5_value_out; end
            `HL_WEIGHTS_3_6_OFFSET : begin regpool_rdata <= hl_weights_3_6_value_out; end
            `HL_WEIGHTS_3_7_OFFSET : begin regpool_rdata <= hl_weights_3_7_value_out; end
            `HL_WEIGHTS_3_8_OFFSET : begin regpool_rdata <= hl_weights_3_8_value_out; end
            `HL_WEIGHTS_4_0_OFFSET : begin regpool_rdata <= hl_weights_4_0_value_out; end
            `HL_WEIGHTS_4_1_OFFSET : begin regpool_rdata <= hl_weights_4_1_value_out; end
            `HL_WEIGHTS_4_2_OFFSET : begin regpool_rdata <= hl_weights_4_2_value_out; end
            `HL_WEIGHTS_4_3_OFFSET : begin regpool_rdata <= hl_weights_4_3_value_out; end
            `HL_WEIGHTS_4_4_OFFSET : begin regpool_rdata <= hl_weights_4_4_value_out; end
            `HL_WEIGHTS_4_5_OFFSET : begin regpool_rdata <= hl_weights_4_5_value_out; end
            `HL_WEIGHTS_4_6_OFFSET : begin regpool_rdata <= hl_weights_4_6_value_out; end
            `HL_WEIGHTS_4_7_OFFSET : begin regpool_rdata <= hl_weights_4_7_value_out; end
            `HL_WEIGHTS_4_8_OFFSET : begin regpool_rdata <= hl_weights_4_8_value_out; end
            `HL_WEIGHTS_5_0_OFFSET : begin regpool_rdata <= hl_weights_5_0_value_out; end
            `HL_WEIGHTS_5_1_OFFSET : begin regpool_rdata <= hl_weights_5_1_value_out; end
            `HL_WEIGHTS_5_2_OFFSET : begin regpool_rdata <= hl_weights_5_2_value_out; end
            `HL_WEIGHTS_5_3_OFFSET : begin regpool_rdata <= hl_weights_5_3_value_out; end
            `HL_WEIGHTS_5_4_OFFSET : begin regpool_rdata <= hl_weights_5_4_value_out; end
            `HL_WEIGHTS_5_5_OFFSET : begin regpool_rdata <= hl_weights_5_5_value_out; end
            `HL_WEIGHTS_5_6_OFFSET : begin regpool_rdata <= hl_weights_5_6_value_out; end
            `HL_WEIGHTS_5_7_OFFSET : begin regpool_rdata <= hl_weights_5_7_value_out; end
            `HL_WEIGHTS_5_8_OFFSET : begin regpool_rdata <= hl_weights_5_8_value_out; end
            `HL_BIAS_0_OFFSET : begin regpool_rdata <= hl_bias_0_value_out; end
            `HL_BIAS_1_OFFSET : begin regpool_rdata <= hl_bias_1_value_out; end
            `HL_BIAS_2_OFFSET : begin regpool_rdata <= hl_bias_2_value_out; end
            `HL_BIAS_3_OFFSET : begin regpool_rdata <= hl_bias_3_value_out; end
            `HL_BIAS_4_OFFSET : begin regpool_rdata <= hl_bias_4_value_out; end
            `HL_BIAS_5_OFFSET : begin regpool_rdata <= hl_bias_5_value_out; end
            `OL_WEIGHTS_0_0_OFFSET : begin regpool_rdata <= ol_weights_0_0_value_out; end
            `OL_WEIGHTS_0_1_OFFSET : begin regpool_rdata <= ol_weights_0_1_value_out; end
            `OL_WEIGHTS_0_2_OFFSET : begin regpool_rdata <= ol_weights_0_2_value_out; end
            `OL_WEIGHTS_0_3_OFFSET : begin regpool_rdata <= ol_weights_0_3_value_out; end
            `OL_WEIGHTS_0_4_OFFSET : begin regpool_rdata <= ol_weights_0_4_value_out; end
            `OL_WEIGHTS_0_5_OFFSET : begin regpool_rdata <= ol_weights_0_5_value_out; end
            `OL_WEIGHTS_1_0_OFFSET : begin regpool_rdata <= ol_weights_1_0_value_out; end
            `OL_WEIGHTS_1_1_OFFSET : begin regpool_rdata <= ol_weights_1_1_value_out; end
            `OL_WEIGHTS_1_2_OFFSET : begin regpool_rdata <= ol_weights_1_2_value_out; end
            `OL_WEIGHTS_1_3_OFFSET : begin regpool_rdata <= ol_weights_1_3_value_out; end
            `OL_WEIGHTS_1_4_OFFSET : begin regpool_rdata <= ol_weights_1_4_value_out; end
            `OL_WEIGHTS_1_5_OFFSET : begin regpool_rdata <= ol_weights_1_5_value_out; end
            `OL_WEIGHTS_2_0_OFFSET : begin regpool_rdata <= ol_weights_2_0_value_out; end
            `OL_WEIGHTS_2_1_OFFSET : begin regpool_rdata <= ol_weights_2_1_value_out; end
            `OL_WEIGHTS_2_2_OFFSET : begin regpool_rdata <= ol_weights_2_2_value_out; end
            `OL_WEIGHTS_2_3_OFFSET : begin regpool_rdata <= ol_weights_2_3_value_out; end
            `OL_WEIGHTS_2_4_OFFSET : begin regpool_rdata <= ol_weights_2_4_value_out; end
            `OL_WEIGHTS_2_5_OFFSET : begin regpool_rdata <= ol_weights_2_5_value_out; end
            `OL_BIAS_0_OFFSET : begin regpool_rdata <= ol_bias_0_value_out; end
            `OL_BIAS_1_OFFSET : begin regpool_rdata <= ol_bias_1_value_out; end
            `OL_BIAS_2_OFFSET : begin regpool_rdata <= ol_bias_2_value_out; end
            `INPUT_GRID_0_OFFSET : begin regpool_rdata <= input_grid_0_value_out; end
            `INPUT_GRID_1_OFFSET : begin regpool_rdata <= input_grid_1_value_out; end
            `INPUT_GRID_2_OFFSET : begin regpool_rdata <= input_grid_2_value_out; end
            `INPUT_GRID_3_OFFSET : begin regpool_rdata <= input_grid_3_value_out; end
            `INPUT_GRID_4_OFFSET : begin regpool_rdata <= input_grid_4_value_out; end
            `INPUT_GRID_5_OFFSET : begin regpool_rdata <= input_grid_5_value_out; end
            `INPUT_GRID_6_OFFSET : begin regpool_rdata <= input_grid_6_value_out; end
            `INPUT_GRID_7_OFFSET : begin regpool_rdata <= input_grid_7_value_out; end
            `INPUT_GRID_8_OFFSET : begin regpool_rdata <= input_grid_8_value_out; end
            `OUTPUT_SOLUTION_0_OFFSET : begin regpool_rdata <= output_solution_0_value_out; end
            `OUTPUT_SOLUTION_1_OFFSET : begin regpool_rdata <= output_solution_1_value_out; end
            `OUTPUT_SOLUTION_2_OFFSET : begin regpool_rdata <= output_solution_2_value_out; end
            `CORE_CTRL_OFFSET : begin regpool_rdata <= core_ctrl_value_out; end
            `CORE_STATUS_OFFSET : begin regpool_rdata <= core_status_value_out; end
            default : begin regpool_rdata <= 32'hdeadbeef; end
        endcase
    end

    // Compose and decompose CSR structured data. Control registers (those written by the Software
    // and read by the Hardware) are put over the  hwif_out  port; Status registers (those written
    // by the Hardware and read by the Software) are get over the  hwif_in  port
    assign { hwif_out.HL_WEIGHTS_0[0].data.value } = hl_weights_0_0_value_out;
    assign { hwif_out.HL_WEIGHTS_0[1].data.value } = hl_weights_0_1_value_out;
    assign { hwif_out.HL_WEIGHTS_0[2].data.value } = hl_weights_0_2_value_out;
    assign { hwif_out.HL_WEIGHTS_0[3].data.value } = hl_weights_0_3_value_out;
    assign { hwif_out.HL_WEIGHTS_0[4].data.value } = hl_weights_0_4_value_out;
    assign { hwif_out.HL_WEIGHTS_0[5].data.value } = hl_weights_0_5_value_out;
    assign { hwif_out.HL_WEIGHTS_0[6].data.value } = hl_weights_0_6_value_out;
    assign { hwif_out.HL_WEIGHTS_0[7].data.value } = hl_weights_0_7_value_out;
    assign { hwif_out.HL_WEIGHTS_0[8].data.value } = hl_weights_0_8_value_out;
    assign { hwif_out.HL_WEIGHTS_1[0].data.value } = hl_weights_1_0_value_out;
    assign { hwif_out.HL_WEIGHTS_1[1].data.value } = hl_weights_1_1_value_out;
    assign { hwif_out.HL_WEIGHTS_1[2].data.value } = hl_weights_1_2_value_out;
    assign { hwif_out.HL_WEIGHTS_1[3].data.value } = hl_weights_1_3_value_out;
    assign { hwif_out.HL_WEIGHTS_1[4].data.value } = hl_weights_1_4_value_out;
    assign { hwif_out.HL_WEIGHTS_1[5].data.value } = hl_weights_1_5_value_out;
    assign { hwif_out.HL_WEIGHTS_1[6].data.value } = hl_weights_1_6_value_out;
    assign { hwif_out.HL_WEIGHTS_1[7].data.value } = hl_weights_1_7_value_out;
    assign { hwif_out.HL_WEIGHTS_1[8].data.value } = hl_weights_1_8_value_out;
    assign { hwif_out.HL_WEIGHTS_2[0].data.value } = hl_weights_2_0_value_out;
    assign { hwif_out.HL_WEIGHTS_2[1].data.value } = hl_weights_2_1_value_out;
    assign { hwif_out.HL_WEIGHTS_2[2].data.value } = hl_weights_2_2_value_out;
    assign { hwif_out.HL_WEIGHTS_2[3].data.value } = hl_weights_2_3_value_out;
    assign { hwif_out.HL_WEIGHTS_2[4].data.value } = hl_weights_2_4_value_out;
    assign { hwif_out.HL_WEIGHTS_2[5].data.value } = hl_weights_2_5_value_out;
    assign { hwif_out.HL_WEIGHTS_2[6].data.value } = hl_weights_2_6_value_out;
    assign { hwif_out.HL_WEIGHTS_2[7].data.value } = hl_weights_2_7_value_out;
    assign { hwif_out.HL_WEIGHTS_2[8].data.value } = hl_weights_2_8_value_out;
    assign { hwif_out.HL_WEIGHTS_3[0].data.value } = hl_weights_3_0_value_out;
    assign { hwif_out.HL_WEIGHTS_3[1].data.value } = hl_weights_3_1_value_out;
    assign { hwif_out.HL_WEIGHTS_3[2].data.value } = hl_weights_3_2_value_out;
    assign { hwif_out.HL_WEIGHTS_3[3].data.value } = hl_weights_3_3_value_out;
    assign { hwif_out.HL_WEIGHTS_3[4].data.value } = hl_weights_3_4_value_out;
    assign { hwif_out.HL_WEIGHTS_3[5].data.value } = hl_weights_3_5_value_out;
    assign { hwif_out.HL_WEIGHTS_3[6].data.value } = hl_weights_3_6_value_out;
    assign { hwif_out.HL_WEIGHTS_3[7].data.value } = hl_weights_3_7_value_out;
    assign { hwif_out.HL_WEIGHTS_3[8].data.value } = hl_weights_3_8_value_out;
    assign { hwif_out.HL_WEIGHTS_4[0].data.value } = hl_weights_4_0_value_out;
    assign { hwif_out.HL_WEIGHTS_4[1].data.value } = hl_weights_4_1_value_out;
    assign { hwif_out.HL_WEIGHTS_4[2].data.value } = hl_weights_4_2_value_out;
    assign { hwif_out.HL_WEIGHTS_4[3].data.value } = hl_weights_4_3_value_out;
    assign { hwif_out.HL_WEIGHTS_4[4].data.value } = hl_weights_4_4_value_out;
    assign { hwif_out.HL_WEIGHTS_4[5].data.value } = hl_weights_4_5_value_out;
    assign { hwif_out.HL_WEIGHTS_4[6].data.value } = hl_weights_4_6_value_out;
    assign { hwif_out.HL_WEIGHTS_4[7].data.value } = hl_weights_4_7_value_out;
    assign { hwif_out.HL_WEIGHTS_4[8].data.value } = hl_weights_4_8_value_out;
    assign { hwif_out.HL_WEIGHTS_5[0].data.value } = hl_weights_5_0_value_out;
    assign { hwif_out.HL_WEIGHTS_5[1].data.value } = hl_weights_5_1_value_out;
    assign { hwif_out.HL_WEIGHTS_5[2].data.value } = hl_weights_5_2_value_out;
    assign { hwif_out.HL_WEIGHTS_5[3].data.value } = hl_weights_5_3_value_out;
    assign { hwif_out.HL_WEIGHTS_5[4].data.value } = hl_weights_5_4_value_out;
    assign { hwif_out.HL_WEIGHTS_5[5].data.value } = hl_weights_5_5_value_out;
    assign { hwif_out.HL_WEIGHTS_5[6].data.value } = hl_weights_5_6_value_out;
    assign { hwif_out.HL_WEIGHTS_5[7].data.value } = hl_weights_5_7_value_out;
    assign { hwif_out.HL_WEIGHTS_5[8].data.value } = hl_weights_5_8_value_out;
    assign { hwif_out.HL_BIAS_0.data.value } = hl_bias_0_value_out;
    assign { hwif_out.HL_BIAS_1.data.value } = hl_bias_1_value_out;
    assign { hwif_out.HL_BIAS_2.data.value } = hl_bias_2_value_out;
    assign { hwif_out.HL_BIAS_3.data.value } = hl_bias_3_value_out;
    assign { hwif_out.HL_BIAS_4.data.value } = hl_bias_4_value_out;
    assign { hwif_out.HL_BIAS_5.data.value } = hl_bias_5_value_out;
    assign { hwif_out.OL_WEIGHTS_0[0].data.value } = ol_weights_0_0_value_out;
    assign { hwif_out.OL_WEIGHTS_0[1].data.value } = ol_weights_0_1_value_out;
    assign { hwif_out.OL_WEIGHTS_0[2].data.value } = ol_weights_0_2_value_out;
    assign { hwif_out.OL_WEIGHTS_0[3].data.value } = ol_weights_0_3_value_out;
    assign { hwif_out.OL_WEIGHTS_0[4].data.value } = ol_weights_0_4_value_out;
    assign { hwif_out.OL_WEIGHTS_0[5].data.value } = ol_weights_0_5_value_out;
    assign { hwif_out.OL_WEIGHTS_1[0].data.value } = ol_weights_1_0_value_out;
    assign { hwif_out.OL_WEIGHTS_1[1].data.value } = ol_weights_1_1_value_out;
    assign { hwif_out.OL_WEIGHTS_1[2].data.value } = ol_weights_1_2_value_out;
    assign { hwif_out.OL_WEIGHTS_1[3].data.value } = ol_weights_1_3_value_out;
    assign { hwif_out.OL_WEIGHTS_1[4].data.value } = ol_weights_1_4_value_out;
    assign { hwif_out.OL_WEIGHTS_1[5].data.value } = ol_weights_1_5_value_out;
    assign { hwif_out.OL_WEIGHTS_2[0].data.value } = ol_weights_2_0_value_out;
    assign { hwif_out.OL_WEIGHTS_2[1].data.value } = ol_weights_2_1_value_out;
    assign { hwif_out.OL_WEIGHTS_2[2].data.value } = ol_weights_2_2_value_out;
    assign { hwif_out.OL_WEIGHTS_2[3].data.value } = ol_weights_2_3_value_out;
    assign { hwif_out.OL_WEIGHTS_2[4].data.value } = ol_weights_2_4_value_out;
    assign { hwif_out.OL_WEIGHTS_2[5].data.value } = ol_weights_2_5_value_out;
    assign { hwif_out.OL_BIAS_0.data.value } = ol_bias_0_value_out;
    assign { hwif_out.OL_BIAS_1.data.value } = ol_bias_1_value_out;
    assign { hwif_out.OL_BIAS_2.data.value } = ol_bias_2_value_out;
    assign { hwif_out.INPUT_GRID_0.data.value } = input_grid_0_value_out;
    assign { hwif_out.INPUT_GRID_1.data.value } = input_grid_1_value_out;
    assign { hwif_out.INPUT_GRID_2.data.value } = input_grid_2_value_out;
    assign { hwif_out.INPUT_GRID_3.data.value } = input_grid_3_value_out;
    assign { hwif_out.INPUT_GRID_4.data.value } = input_grid_4_value_out;
    assign { hwif_out.INPUT_GRID_5.data.value } = input_grid_5_value_out;
    assign { hwif_out.INPUT_GRID_6.data.value } = input_grid_6_value_out;
    assign { hwif_out.INPUT_GRID_7.data.value } = input_grid_7_value_out;
    assign { hwif_out.INPUT_GRID_8.data.value } = input_grid_8_value_out;
    assign output_solution_0_value_in = { hwif_in.OUTPUT_SOLUTION_0.data.next };
    assign output_solution_1_value_in = { hwif_in.OUTPUT_SOLUTION_1.data.next };
    assign output_solution_2_value_in = { hwif_in.OUTPUT_SOLUTION_2.data.next };
    assign { hwif_out.CORE_CTRL.reserved.value, hwif_out.CORE_CTRL.CFG_DONE.value, hwif_out.CORE_CTRL.LOAD_IN.value, hwif_out.CORE_CTRL.RESET.value } = core_ctrl_value_out;
    assign core_status_value_in = { hwif_in.CORE_STATUS.reserved.next, hwif_in.CORE_STATUS.VALID_OUT.next };
endmodule