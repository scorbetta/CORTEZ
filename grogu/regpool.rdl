// Register map definition

`include "common.rdl"
`include "regs.rdl"

addrmap regpool {
    desc = "The CORTEZ CSR block";

    // Defaults
    default regwidth = 32;
    default shared = true;

    // Weights of the hidden layer, one vector for every neuron
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_0, "Weights for neuron 0 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_1, "Weights for neuron 1 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_2, "Weights for neuron 2 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_3, "Weights for neuron 3 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_4, "Weights for neuron 4 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_5, "Weights for neuron 5 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_6, "Weights for neuron 6 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_7, "Weights for neuron 7 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_8, "Weights for neuron 8 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_9, "Weights for neuron 9 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_10, "Weights for neuron 10 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_11, "Weights for neuron 11 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_12, "Weights for neuron 12 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_13, "Weights for neuron 13 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_14, "Weights for neuron 14 of the hidden layer", 25)
    `REF_MULTI_CGPREG(GP, HL_WEIGHTS_15, "Weights for neuron 15 of the hidden layer", 25)

    // Bias of the hidden layer
    `REF_CGPREG(GP, HL_BIAS_0, "Bias for neuron 0 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_1, "Bias for neuron 1 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_2, "Bias for neuron 2 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_3, "Bias for neuron 3 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_4, "Bias for neuron 4 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_5, "Bias for neuron 5 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_6, "Bias for neuron 6 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_7, "Bias for neuron 7 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_8, "Bias for neuron 8 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_9, "Bias for neuron 9 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_10, "Bias for neuron 10 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_11, "Bias for neuron 11 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_12, "Bias for neuron 12 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_13, "Bias for neuron 13 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_14, "Bias for neuron 14 of the hidden layer")
    `REF_CGPREG(GP, HL_BIAS_15, "Bias for neuron 15 of the hidden layer")

    // Weights of the output layer, one vector for every neuron
    `REF_MULTI_CGPREG(GP, OL_WEIGHTS_0, "Weights for neuron 0 of the output layer", 16)
    `REF_MULTI_CGPREG(GP, OL_WEIGHTS_1, "Weights for neuron 1 of the output layer", 16)
    `REF_MULTI_CGPREG(GP, OL_WEIGHTS_2, "Weights for neuron 2 of the output layer", 16)
    `REF_MULTI_CGPREG(GP, OL_WEIGHTS_3, "Weights for neuron 3 of the output layer", 16)
    `REF_MULTI_CGPREG(GP, OL_WEIGHTS_4, "Weights for neuron 4 of the output layer", 16)

    // Bias of the output layer
    `REF_CGPREG(GP, OL_BIAS_0, "Bias for neuron 0 of the output layer")
    `REF_CGPREG(GP, OL_BIAS_1, "Bias for neuron 1 of the output layer")
    `REF_CGPREG(GP, OL_BIAS_2, "Bias for neuron 2 of the output layer")
    `REF_CGPREG(GP, OL_BIAS_3, "Bias for neuron 3 of the output layer")
    `REF_CGPREG(GP, OL_BIAS_4, "Bias for neuron 4 of the output layer")

    // Input problem, one vector for each pixel
    `REF_CGPREG(GP, INPUT_GRID_0, "Pixel 0 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_1, "Pixel 1 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_2, "Pixel 2 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_3, "Pixel 3 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_4, "Pixel 4 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_5, "Pixel 5 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_6, "Pixel 6 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_7, "Pixel 7 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_8, "Pixel 8 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_9, "Pixel 9 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_10, "Pixel 10 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_11, "Pixel 11 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_12, "Pixel 12 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_13, "Pixel 13 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_14, "Pixel 14 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_15, "Pixel 15 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_16, "Pixel 16 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_17, "Pixel 17 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_18, "Pixel 18 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_19, "Pixel 19 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_20, "Pixel 20 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_21, "Pixel 21 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_22, "Pixel 22 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_23, "Pixel 23 of the input character")
    `REF_CGPREG(GP, INPUT_GRID_24, "Pixel 24 of the input character")

    // Output solution, one vector for each character
    `REF_SGPREG(GP, OUTPUT_SOLUTION_0, "Digit 0 of the output solution")
    `REF_SGPREG(GP, OUTPUT_SOLUTION_1, "Digit 1 of the output solution")
    `REF_SGPREG(GP, OUTPUT_SOLUTION_2, "Digit 2 of the output solution")
    `REF_SGPREG(GP, OUTPUT_SOLUTION_3, "Digit 3 of the output solution")
    `REF_SGPREG(GP, OUTPUT_SOLUTION_4, "Digit 4 of the output solution")

    // Control register
    `REF_CREG(CORE_CTRL, CORE_CTRL)

    // Status register
    `REF_SREG(CORE_STATUS, CORE_STATUS)
};
