// Generated by  generate_wires.py  utility starting from JINJA templated  CSR_BUNDLE_WIRES.template  file

// Unpack input values
assign values_in[0] = regpool_bundle_out.INPUT_GRID_0.data.value;
assign values_in[1] = regpool_bundle_out.INPUT_GRID_1.data.value;
assign values_in[2] = regpool_bundle_out.INPUT_GRID_2.data.value;
assign values_in[3] = regpool_bundle_out.INPUT_GRID_3.data.value;
assign values_in[4] = regpool_bundle_out.INPUT_GRID_4.data.value;
assign values_in[5] = regpool_bundle_out.INPUT_GRID_5.data.value;
assign values_in[6] = regpool_bundle_out.INPUT_GRID_6.data.value;
assign values_in[7] = regpool_bundle_out.INPUT_GRID_7.data.value;
assign values_in[8] = regpool_bundle_out.INPUT_GRID_8.data.value;

// Generate pulse from  LOAD_IN  field
EDGE_DETECTOR LOAD_IN_EDGE_DETECTOR (
    .CLK            (CLK),
    .RSTN           (RSTN),
    .SAMPLE_IN      (regpool_bundle_out.CORE_CTRL.LOAD_IN.value),
    .RISE_EDGE_OUT  (valid_in),
    .FALL_EDGE_OUT  () // Unused
);

// Unpack hidden layer weights
assign hl_weights_in[0] = regpool_bundle_out.HL_WEIGHTS_0[0].data.value;
assign hl_weights_in[1] = regpool_bundle_out.HL_WEIGHTS_0[1].data.value;
assign hl_weights_in[2] = regpool_bundle_out.HL_WEIGHTS_0[2].data.value;
assign hl_weights_in[3] = regpool_bundle_out.HL_WEIGHTS_0[3].data.value;
assign hl_weights_in[4] = regpool_bundle_out.HL_WEIGHTS_0[4].data.value;
assign hl_weights_in[5] = regpool_bundle_out.HL_WEIGHTS_0[5].data.value;
assign hl_weights_in[6] = regpool_bundle_out.HL_WEIGHTS_0[6].data.value;
assign hl_weights_in[7] = regpool_bundle_out.HL_WEIGHTS_0[7].data.value;
assign hl_weights_in[8] = regpool_bundle_out.HL_WEIGHTS_0[8].data.value;
assign hl_weights_in[9] = regpool_bundle_out.HL_WEIGHTS_1[0].data.value;
assign hl_weights_in[10] = regpool_bundle_out.HL_WEIGHTS_1[1].data.value;
assign hl_weights_in[11] = regpool_bundle_out.HL_WEIGHTS_1[2].data.value;
assign hl_weights_in[12] = regpool_bundle_out.HL_WEIGHTS_1[3].data.value;
assign hl_weights_in[13] = regpool_bundle_out.HL_WEIGHTS_1[4].data.value;
assign hl_weights_in[14] = regpool_bundle_out.HL_WEIGHTS_1[5].data.value;
assign hl_weights_in[15] = regpool_bundle_out.HL_WEIGHTS_1[6].data.value;
assign hl_weights_in[16] = regpool_bundle_out.HL_WEIGHTS_1[7].data.value;
assign hl_weights_in[17] = regpool_bundle_out.HL_WEIGHTS_1[8].data.value;
assign hl_weights_in[18] = regpool_bundle_out.HL_WEIGHTS_2[0].data.value;
assign hl_weights_in[19] = regpool_bundle_out.HL_WEIGHTS_2[1].data.value;
assign hl_weights_in[20] = regpool_bundle_out.HL_WEIGHTS_2[2].data.value;
assign hl_weights_in[21] = regpool_bundle_out.HL_WEIGHTS_2[3].data.value;
assign hl_weights_in[22] = regpool_bundle_out.HL_WEIGHTS_2[4].data.value;
assign hl_weights_in[23] = regpool_bundle_out.HL_WEIGHTS_2[5].data.value;
assign hl_weights_in[24] = regpool_bundle_out.HL_WEIGHTS_2[6].data.value;
assign hl_weights_in[25] = regpool_bundle_out.HL_WEIGHTS_2[7].data.value;
assign hl_weights_in[26] = regpool_bundle_out.HL_WEIGHTS_2[8].data.value;
assign hl_weights_in[27] = regpool_bundle_out.HL_WEIGHTS_3[0].data.value;
assign hl_weights_in[28] = regpool_bundle_out.HL_WEIGHTS_3[1].data.value;
assign hl_weights_in[29] = regpool_bundle_out.HL_WEIGHTS_3[2].data.value;
assign hl_weights_in[30] = regpool_bundle_out.HL_WEIGHTS_3[3].data.value;
assign hl_weights_in[31] = regpool_bundle_out.HL_WEIGHTS_3[4].data.value;
assign hl_weights_in[32] = regpool_bundle_out.HL_WEIGHTS_3[5].data.value;
assign hl_weights_in[33] = regpool_bundle_out.HL_WEIGHTS_3[6].data.value;
assign hl_weights_in[34] = regpool_bundle_out.HL_WEIGHTS_3[7].data.value;
assign hl_weights_in[35] = regpool_bundle_out.HL_WEIGHTS_3[8].data.value;
assign hl_weights_in[36] = regpool_bundle_out.HL_WEIGHTS_4[0].data.value;
assign hl_weights_in[37] = regpool_bundle_out.HL_WEIGHTS_4[1].data.value;
assign hl_weights_in[38] = regpool_bundle_out.HL_WEIGHTS_4[2].data.value;
assign hl_weights_in[39] = regpool_bundle_out.HL_WEIGHTS_4[3].data.value;
assign hl_weights_in[40] = regpool_bundle_out.HL_WEIGHTS_4[4].data.value;
assign hl_weights_in[41] = regpool_bundle_out.HL_WEIGHTS_4[5].data.value;
assign hl_weights_in[42] = regpool_bundle_out.HL_WEIGHTS_4[6].data.value;
assign hl_weights_in[43] = regpool_bundle_out.HL_WEIGHTS_4[7].data.value;
assign hl_weights_in[44] = regpool_bundle_out.HL_WEIGHTS_4[8].data.value;
assign hl_weights_in[45] = regpool_bundle_out.HL_WEIGHTS_5[0].data.value;
assign hl_weights_in[46] = regpool_bundle_out.HL_WEIGHTS_5[1].data.value;
assign hl_weights_in[47] = regpool_bundle_out.HL_WEIGHTS_5[2].data.value;
assign hl_weights_in[48] = regpool_bundle_out.HL_WEIGHTS_5[3].data.value;
assign hl_weights_in[49] = regpool_bundle_out.HL_WEIGHTS_5[4].data.value;
assign hl_weights_in[50] = regpool_bundle_out.HL_WEIGHTS_5[5].data.value;
assign hl_weights_in[51] = regpool_bundle_out.HL_WEIGHTS_5[6].data.value;
assign hl_weights_in[52] = regpool_bundle_out.HL_WEIGHTS_5[7].data.value;
assign hl_weights_in[53] = regpool_bundle_out.HL_WEIGHTS_5[8].data.value;

// Unpack hidden layer bias
assign hl_bias_in[0] = regpool_bundle_out.HL_BIAS_0.data.value;
assign hl_bias_in[1] = regpool_bundle_out.HL_BIAS_1.data.value;
assign hl_bias_in[2] = regpool_bundle_out.HL_BIAS_2.data.value;
assign hl_bias_in[3] = regpool_bundle_out.HL_BIAS_3.data.value;
assign hl_bias_in[4] = regpool_bundle_out.HL_BIAS_4.data.value;
assign hl_bias_in[5] = regpool_bundle_out.HL_BIAS_5.data.value;

// Unpack output layer weights
assign ol_weights_in[0] = regpool_bundle_out.OL_WEIGHTS_0[0].data.value;
assign ol_weights_in[1] = regpool_bundle_out.OL_WEIGHTS_0[1].data.value;
assign ol_weights_in[2] = regpool_bundle_out.OL_WEIGHTS_0[2].data.value;
assign ol_weights_in[3] = regpool_bundle_out.OL_WEIGHTS_0[3].data.value;
assign ol_weights_in[4] = regpool_bundle_out.OL_WEIGHTS_0[4].data.value;
assign ol_weights_in[5] = regpool_bundle_out.OL_WEIGHTS_0[5].data.value;
assign ol_weights_in[6] = regpool_bundle_out.OL_WEIGHTS_1[0].data.value;
assign ol_weights_in[7] = regpool_bundle_out.OL_WEIGHTS_1[1].data.value;
assign ol_weights_in[8] = regpool_bundle_out.OL_WEIGHTS_1[2].data.value;
assign ol_weights_in[9] = regpool_bundle_out.OL_WEIGHTS_1[3].data.value;
assign ol_weights_in[10] = regpool_bundle_out.OL_WEIGHTS_1[4].data.value;
assign ol_weights_in[11] = regpool_bundle_out.OL_WEIGHTS_1[5].data.value;
assign ol_weights_in[12] = regpool_bundle_out.OL_WEIGHTS_2[0].data.value;
assign ol_weights_in[13] = regpool_bundle_out.OL_WEIGHTS_2[1].data.value;
assign ol_weights_in[14] = regpool_bundle_out.OL_WEIGHTS_2[2].data.value;
assign ol_weights_in[15] = regpool_bundle_out.OL_WEIGHTS_2[3].data.value;
assign ol_weights_in[16] = regpool_bundle_out.OL_WEIGHTS_2[4].data.value;
assign ol_weights_in[17] = regpool_bundle_out.OL_WEIGHTS_2[5].data.value;

// Unpack output layer bias
assign ol_bias_in[0] = regpool_bundle_out.OL_BIAS_0.data.value;
assign ol_bias_in[1] = regpool_bundle_out.OL_BIAS_1.data.value;
assign ol_bias_in[2] = regpool_bundle_out.OL_BIAS_2.data.value;

// Pack output values
assign regpool_bundle_in.OUTPUT_SOLUTION_0.data.next = values_out[0];
assign regpool_bundle_in.OUTPUT_SOLUTION_1.data.next = values_out[1];
assign regpool_bundle_in.OUTPUT_SOLUTION_2.data.next = values_out[2];

// Latch the solution strobe
DELTA_REG #(
    .DATA_WIDTH (1),
    .HAS_RESET  (1)
)
VALID_SOLUTION_LATCH (
    .CLK            (CLK),
    .RSTN           (RSTN),
    .READ_EVENT     (regpool_bundle_out.CORE_CTRL.RESET.value),
    .VALUE_IN       (valid_out),
    .VALUE_CHANGE   (regpool_bundle_in.CORE_STATUS.VALID_OUT.next),
    .VALUE_OUT      () // Unused
);