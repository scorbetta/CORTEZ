# Prepare virtual environment
if [ ! -d venv ]
then
    # Create new env if not already existing
    python3 -m venv venv
    source venv/bin/activate
    # Need to install requirements as well
    pushd grogu.git >/dev/null
        pip install -r requirements.txt
    popd >/dev/null
else
    # Just switch into existing environment
    source venv/bin/activate
fi

# Tweak input files. Expected args:
#   @1 Number of primary inputs (boulder size)
#   @2 Number of primary outputs (solution size, matches also number of OL neurons)
#   @3 Number of neurons in hidden layer
sed "s/__NUM_INPUTS__/$1/g" core_regfile.rdl.template > temp.rdl
sed -i "s/__NUM_OUTPUTS__/$2/g" temp.rdl
peakrdl_cmd="peakrdl preprocess temp.rdl -o core_regfile.rdl"
echo "exec: ${peakrdl_cmd}"
eval ${peakrdl_cmd}

sed "s/__NUM_INPUTS__/$1/g" neuron_regfile.rdl.template > temp.rdl
sed -i "s/__PREFIX__/hl_/g" temp.rdl
peakrdl_cmd="peakrdl preprocess temp.rdl -o hl_neuron_regfile.rdl"
echo "exec: ${peakrdl_cmd}"
eval ${peakrdl_cmd}

sed "s/__NUM_INPUTS__/$3/g" neuron_regfile.rdl.template > temp.rdl
sed -i "s/__PREFIX__/ol_/g" temp.rdl
peakrdl_cmd="peakrdl preprocess temp.rdl -o ol_neuron_regfile.rdl"
echo "exec: ${peakrdl_cmd}"
eval ${peakrdl_cmd}

# Run grogu for neurons
ln -sf grogu.neurons.ini grogu.ini
fileset=( hl_neuron_regfile.rdl ol_neuron_regfile.rdl )
for file in ${fileset[@]}
do
    basename=$( basename $file .rdl )
    grogu_cmd="./grogu.git/src/grogu.py --rdl ${file} --prefix ${basename}"
    echo "exec: ${grogu_cmd}"
    eval ${grogu_cmd}
done

# Run grogu for core
ln -sf grogu.core.ini grogu.ini
fileset=( core_regfile.rdl )
for file in ${fileset[@]}
do
    basename=$( basename $file .rdl )
    grogu_cmd="./grogu.git/src/grogu.py --rdl ${file} --prefix ${basename}"
    echo "exec: ${grogu_cmd}"
    eval ${grogu_cmd}
done

# Leave virtual environment
deactivate
