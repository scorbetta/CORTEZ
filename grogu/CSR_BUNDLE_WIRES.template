// Generated by  generate_wires.py  utility starting from JINJA templated  {{template_file}}  file

// Unpack input values
{%- for idx in range(num_inputs) %}
assign values_in[{{idx}}] = regpool_bundle_out.INPUT_GRID_{{idx}}.data.value;
{%- endfor %}

// Generate pulse from  LOAD_IN  field
EDGE_DETECTOR LOAD_IN_EDGE_DETECTOR (
    .CLK            (CLK),
    .RSTN           (RSTN),
    .SAMPLE_IN      (regpool_bundle_out.CORE_CTRL.LOAD_IN.value),
    .RISE_EDGE_OUT  (valid_in),
    .FALL_EDGE_OUT  () // Unused
);

// Unpack hidden layer weights
{%- for odx in range(num_hl_nodes) %}
{%- for idx in range(num_inputs) %}
assign hl_weights_in[{{odx*num_inputs+idx}}] = regpool_bundle_out.HL_WEIGHTS_{{odx}}[{{idx}}].data.value;
{%- endfor %}
{%- endfor %}

// Unpack hidden layer bias
{%- for odx in range(num_hl_nodes) %}
assign hl_bias_in[{{odx}}] = regpool_bundle_out.HL_BIAS_{{odx}}.data.value;
{%- endfor %}

// Unpack output layer weights
{%- for odx in range(num_outputs) %}
{%- for idx in range(num_hl_nodes) %}
assign ol_weights_in[{{odx*num_hl_nodes+idx}}] = regpool_bundle_out.OL_WEIGHTS_{{odx}}[{{idx}}].data.value;
{%- endfor %}
{%- endfor %}

// Unpack output layer bias
{%- for odx in range(num_outputs) %}
assign ol_bias_in[{{odx}}] = regpool_bundle_out.OL_BIAS_{{odx}}.data.value;
{%- endfor %}

// Pack output values
{%- for odx in range(num_outputs) %}
assign regpool_bundle_in.OUTPUT_SOLUTION_{{odx}}.data.next = values_out[{{odx}}];
{%- endfor %}

// Latch the solution strobe
DELTA_REG #(
    .DATA_WIDTH (1),
    .HAS_RESET  (1)
)
VALID_SOLUTION_LATCH (
    .CLK            (CLK),
    .RSTN           (RSTN),
    .READ_EVENT     (regpool_bundle_out.CORE_CTRL.RESET.value),
    .VALUE_IN       (valid_out),
    .VALUE_CHANGE   (regpool_bundle_in.CORE_STATUS.VALID_OUT.next),
    .VALUE_OUT      () // Unused
);
